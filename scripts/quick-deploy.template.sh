#!/bin/bash

# Quick Deploy Script Template for WPG Engine
# Copy this to quick-deploy.sh and configure your settings

set -e

SERVER_ID="epducvokks3etcr82gsu"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
echo_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
echo_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
echo_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Check if .env exists
if [[ ! -f .env ]]; then
    echo_error ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo_info "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:"
    echo "cp .env.example .env"
    echo "nano .env"
    exit 1
fi

# Load environment variables
source .env

# Check required variables
if [[ -z "$TG_TOKEN" ]]; then
    echo_error "TG_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
    exit 1
fi

if [[ -z "$TG_ADMIN_ID" ]]; then
    echo_error "TG_ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
    exit 1
fi

echo_info "üöÄ –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä $SERVER_ID"

# Get or create registry
echo_info "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Container Registry..."
REGISTRY_ID=$(yc container registry list --format json | jq -r '.[0].id' 2>/dev/null || echo "")

if [[ -z "$REGISTRY_ID" ]] || [[ "$REGISTRY_ID" == "null" ]]; then
    echo_info "–°–æ–∑–¥–∞–Ω–∏–µ Container Registry..."
    yc container registry create --name wpg-engine-registry
    REGISTRY_ID=$(yc container registry list --format json | jq -r '.[0].id')
fi

echo_success "Registry ID: $REGISTRY_ID"

# Build image
echo_info "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
docker build -t cr.yandex/$REGISTRY_ID/wpg-engine-bot:latest .

# Push image
echo_info "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ registry..."
docker push cr.yandex/$REGISTRY_ID/wpg-engine-bot:latest

# Deploy to server
echo_info "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."

# Create deployment script with environment variables
cat > /tmp/quick_deploy.sh << EOF
#!/bin/bash
set -e

# Variables
IMAGE_URL="cr.yandex/$REGISTRY_ID/wpg-engine-bot:latest"
CONTAINER_NAME="wpg-engine-bot"

echo "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
docker stop \$CONTAINER_NAME 2>/dev/null || true
docker rm \$CONTAINER_NAME 2>/dev/null || true

echo "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
docker pull \$IMAGE_URL

echo "üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
docker run -d \\
  --name \$CONTAINER_NAME \\
  --restart unless-stopped \\
  -e TG_TOKEN="$TG_TOKEN" \\
  -e TG_ADMIN_ID="$TG_ADMIN_ID" \\
  -e AI_OPENROUTER_API_KEY="${AI_OPENROUTER_API_KEY:-}" \\
  -e DB_URL="sqlite:///./data/wpg_engine.db" \\
  -e LOG_LEVEL="INFO" \\
  -e DEBUG="false" \\
  -v /opt/wpg-engine/data:/app/data \\
  -v /opt/wpg-engine/logs:/app/logs \\
  \$IMAGE_URL

echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker image prune -f

echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
docker ps | grep \$CONTAINER_NAME

echo ""
echo "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
sleep 5
docker logs --tail 20 \$CONTAINER_NAME
EOF

# Copy and execute deployment script
yc compute ssh --id $SERVER_ID --command "mkdir -p /opt/wpg-engine/{data,logs,backups}"

echo_info "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–µ–ø–ª–æ—è..."
yc compute scp /tmp/quick_deploy.sh $SERVER_ID:/tmp/quick_deploy.sh

echo_info "üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
yc compute ssh --id $SERVER_ID --command "chmod +x /tmp/quick_deploy.sh && /tmp/quick_deploy.sh && rm /tmp/quick_deploy.sh"

# Clean up
rm /tmp/quick_deploy.sh

echo_success "üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""
echo_info "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
echo "yc compute ssh --id $SERVER_ID --command 'docker ps'"
echo "yc compute ssh --id $SERVER_ID --command 'docker logs wpg-engine-bot'"
echo "yc compute ssh --id $SERVER_ID --command 'docker restart wpg-engine-bot'"