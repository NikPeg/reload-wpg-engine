"""
Tests for RAG formatting functionality
"""

from telegramify_markdown import markdownify


def test_telegramify_markdown_basic():
    """Test basic telegramify-markdown functionality"""
    markdown_text = """
# Header 1

**Bold text** and *italic text*

- List item 1
- List item 2

### Subheader

Some regular text with `code`.
"""

    # Should not raise exception
    result = markdownify(markdown_text)
    assert isinstance(result, str)
    assert len(result) > 0


def test_telegramify_markdown_rag_format():
    """Test telegramify-markdown with RAG-style content"""
    rag_content = """üìä RAG-—Å–ø—Ä–∞–≤–∫–∞:

**–ó–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞:** –ù–∞–ø–∞–¥–µ–Ω–∏–µ –°–æ–ª—è—Ä–∏–∏ –Ω–∞ –í–∏—Ä–¥–∂–∏–Ω–∏—é –∏ –ê–±–æ–±–∏—Å—Ç–∞–Ω.

### **1. –í–æ–µ–Ω–Ω–∞—è –º–æ—â—å:**
- **–°–æ–ª—è—Ä–∏—è (–°–ò):** –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (8/10). –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö (9/10)
- **–í–∏—Ä–¥–∂–∏–Ω–∏—è (–í–†):** –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (5/10). –°–ª–∞–±–µ–µ –≤ –≤–æ–µ–Ω–Ω–æ–º –¥–µ–ª–µ
- **–ê–±–æ–±–∏—Å—Ç–∞–Ω (–ê–ë):** –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (3/10). –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ–º–æ—Å—Ç—å

### **2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
- –°–æ–ª—è—Ä–∏—è –∏–º–µ–µ—Ç —è–≤–Ω–æ–µ –≤–æ–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ
- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –¥–≤–µ —Å—Ç—Ä–∞–Ω—ã"""

    # Should not raise exception
    result = markdownify(rag_content)
    assert isinstance(result, str)
    assert len(result) > 0
    assert "üìä" in result  # Emoji should be preserved


def test_html_escaping():
    """Test HTML character escaping for fallback"""
    dangerous_text = 'Text with <script>alert("xss")</script> & "quotes" & \'apostrophes\''

    safe_text = (dangerous_text
                 .replace('&', '&amp;')
                 .replace('<', '&lt;')
                 .replace('>', '&gt;')
                 .replace('"', '&quot;')
                 .replace("'", '&#x27;'))

    assert '&lt;script&gt;' in safe_text
    assert '&amp;' in safe_text
    assert '&quot;' in safe_text
    assert '&#x27;' in safe_text
    assert '<script>' not in safe_text


def test_markdown_with_special_characters():
    """Test markdown with characters that might cause issues"""
    problematic_text = """üìä **RAG-—Å–ø—Ä–∞–≤–∫–∞:**

**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏** (–ê–†) —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å—Ç—Ä–∞–Ω—ã **ejedfiojovjfd**.

### **–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑**:
1. **–í–æ–µ–Ω–Ω–∞—è –º–æ—â—å**:
   - **–ê–†**: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (7/10), —Å–∏–ª—å–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞ (9/10).

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ*: –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã < > & " '"""

    # Should handle special characters gracefully
    try:
        result = markdownify(problematic_text)
        assert isinstance(result, str)
    except Exception:
        # If markdownify fails, fallback should work
        safe_text = (problematic_text
                     .replace('&', '&amp;')
                     .replace('<', '&lt;')
                     .replace('>', '&gt;')
                     .replace('"', '&quot;')
                     .replace("'", '&#x27;'))
        assert isinstance(safe_text, str)
        assert '&lt;' in safe_text or '<' not in problematic_text
