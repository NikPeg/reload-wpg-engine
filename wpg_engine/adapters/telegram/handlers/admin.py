"""
Admin handlers
"""

from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from sqlalchemy import select, text
from sqlalchemy.orm import selectinload

from wpg_engine.core.admin_utils import is_admin
from wpg_engine.core.engine import GameEngine
from wpg_engine.models import Player, PlayerRole, get_db


class AdminStates(StatesGroup):
    """Admin states"""

    waiting_for_restart_confirmation = State()
    waiting_for_event_message = State()


async def admin_command(message: Message) -> None:
    """Handle /admin command - admin panel"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get player info for game details with eager loading - take the first admin player
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.game))
            .where(Player.telegram_id == user_id)
            .where(Player.role == PlayerRole.ADMIN)
            .limit(1)
        )
        player = result.scalar_one_or_none()
        break

    if not player:
        await message.answer(
            "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="Markdown",
        )
        return

    await message.answer(
        f"‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        f"*–ò–≥—Ä–∞:* {player.game.name}\n"
        f"*–°–µ—Ç—Ç–∏–Ω–≥:* {player.game.setting}\n"
        f"*–°—Ç–∞—Ç—É—Å:* {player.game.status}\n"
        f"*–ú–∞–∫—Å –∏–≥—Ä–æ–∫–æ–≤:* {player.game.max_players}\n"
        f"*–õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏:* {player.game.years_per_day}\n"
        f"*–ú–∞–∫—Å –æ—á–∫–æ–≤:* {player.game.max_points}\n"
        f"*–ú–∞–∫—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ:* {player.game.max_population:,}\n\n"
        f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        f"‚Ä¢ `/game_stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã\n"
        f"‚Ä¢ `/update_game` - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã\n"
        f"‚Ä¢ `/restart_game` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É (–ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)\n"
        f"‚Ä¢ `/event` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º",
        parse_mode="Markdown",
    )


# Removed pending_command - registrations are now sent directly to admin


async def game_stats_command(message: Message) -> None:
    """Handle /game_stats command"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info - take the first admin player
        result = await game_engine.db.execute(
            select(Player).where(Player.telegram_id == user_id).where(Player.role == PlayerRole.ADMIN).limit(1)
        )
        admin = result.scalar_one_or_none()

        stats = await game_engine.get_game_statistics(admin.game_id)

        await message.answer(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã*\n\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {stats['game_name']}\n"
            f"*–°—Ç–∞—Ç—É—Å:* {stats['status']}\n"
            f"*–°—Ç—Ä–∞–Ω:* {stats['countries_count']}\n"
            f"*–ò–≥—Ä–æ–∫–æ–≤:* {stats['players_count']}\n"
            f"*–ü–æ—Å—Ç–æ–≤:* {stats['posts_count']}\n"
            f"*–°–æ–∑–¥–∞–Ω–∞:* {stats['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"*–û–±–Ω–æ–≤–ª–µ–Ω–∞:* {stats['updated_at'].strftime('%d.%m.%Y %H:%M')}",
            parse_mode="Markdown",
        )


async def restart_game_command(message: Message, state: FSMContext) -> None:
    """Handle /restart_game command"""
    user_id = message.from_user.id
    args = message.text.split(" ", 1)

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            # Check if user is admin from .env
            from wpg_engine.config.settings import settings

            if not settings.telegram.admin_id or user_id != settings.telegram.admin_id:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/restart_game –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã | –°–µ—Ç—Ç–∏–Ω–≥ | –õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ | –ú–∞–∫—Å –æ—á–∫–æ–≤ | –ú–∞–∫—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/restart_game –î—Ä–µ–≤–Ω–∏–π –º–∏—Ä | –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å | 10 | 30 | 10000000</code>\n"
                "‚Ä¢ –ú–∞–∫—Å –æ—á–∫–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ—á–∫–æ–≤ –¥–ª—è –∞—Å–ø–µ–∫—Ç–æ–≤ —Å—Ç—Ä–∞–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)\n"
                "‚Ä¢ –ú–∞–∫—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10,000,000)",
                parse_mode="HTML",
            )
            return

        try:
            # Parse arguments
            parts = [part.strip() for part in args[1].split("|")]
            if len(parts) < 3 or len(parts) > 5:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

            game_name, setting, years_per_day_str = parts[:3]
            max_points_str = parts[3] if len(parts) >= 4 else "30"
            max_population_str = parts[4] if len(parts) == 5 else "10000000"

            years_per_day = int(years_per_day_str)
            max_points = int(max_points_str)
            max_population = int(max_population_str)

            if not game_name or not setting:
                raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ —Å–µ—Ç—Ç–∏–Ω–≥ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")

            if years_per_day < 1 or years_per_day > 365:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365")

            if max_points < 10 or max_points > 100:
                raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 100")

            if max_population < 1000 or max_population > 1_000_000_000:
                raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1,000 –¥–æ 1 –º–ª—Ä–¥")

        except ValueError as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/restart_game –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã | –°–µ—Ç—Ç–∏–Ω–≥ | –õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ | –ú–∞–∫—Å –æ—á–∫–æ–≤ | –ú–∞–∫—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/restart_game –î—Ä–µ–≤–Ω–∏–π –º–∏—Ä | –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å | 10 | 30 | 10000000</code>",
                parse_mode="HTML",
            )
            return

        # Store data for confirmation
        await state.update_data(
            user_id=user_id,
            game_name=game_name,
            setting=setting,
            years_per_day=years_per_day,
            max_points=max_points,
            max_population=max_population,
        )

        await message.answer(
            f"‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï! –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø!*\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å *–ü–û–õ–ù–û–°–¢–¨–Æ –û–ß–ò–°–¢–ò–¢–¨* –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É:\n\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {game_name}\n"
            f"*–°–µ—Ç—Ç–∏–Ω–≥:* {setting}\n"
            f"*–õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏:* {years_per_day}\n"
            f"*–ú–∞–∫—Å –æ—á–∫–æ–≤:* {max_points}\n"
            f"*–ú–∞–∫—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ:* {max_population:,}\n\n"
            f"*–í–°–ï –î–ê–ù–ù–´–ï –ë–£–î–£–¢ –ü–û–¢–ï–†–Ø–ù–´ –ù–ê–í–°–ï–ì–î–ê:*\n"
            f"‚Ä¢ –í—Å–µ –∏–≥—Ä—ã\n"
            f"‚Ä¢ –í—Å–µ –∏–≥—Ä–æ–∫–∏\n"
            f"‚Ä¢ –í—Å–µ —Å—Ç—Ä–∞–Ω—ã\n"
            f"‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ –í—Å–µ –ø–æ—Å—Ç—ã\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–ù–ï–û–ë–†–ê–¢–ò–ú–û*!\n\n"
            f"–í—ã *–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û* —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É?\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ *–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ* (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏), —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="Markdown",
        )
        await state.set_state(AdminStates.waiting_for_restart_confirmation)
        break


async def process_restart_confirmation(message: Message, state: FSMContext) -> None:
    """Process confirmation for game restart"""
    confirmation = message.text.strip()

    if confirmation != "–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ":
        await message.answer("‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω.")
        await state.clear()
        return

    # Get stored data
    data = await state.get_data()
    user_id = data["user_id"]
    game_name = data["game_name"]
    setting = data["setting"]
    years_per_day = data["years_per_day"]
    max_points = data["max_points"]
    max_population = data["max_population"]

    async for db in get_db():
        game_engine = GameEngine(db)

        # –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
        await message.answer("üîÑ –û—á–∏—â–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        await game_engine.db.execute(text("DELETE FROM verdicts"))
        await game_engine.db.execute(text("DELETE FROM posts"))
        await game_engine.db.execute(text("DELETE FROM messages"))
        await game_engine.db.execute(text("DELETE FROM players"))
        await game_engine.db.execute(text("DELETE FROM countries"))
        await game_engine.db.execute(text("DELETE FROM games"))
        await game_engine.db.commit()

        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∏–≥—Ä—É...")

        # Create new game
        game = await game_engine.create_game(
            name=game_name,
            description=f"–ò–≥—Ä–∞ –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ '{setting}'",
            setting=setting,
            max_players=20,
            years_per_day=years_per_day,
            max_points=max_points,
            max_population=max_population,
        )

        # Create admin player
        username = message.from_user.username
        display_name = message.from_user.full_name or f"Admin_{user_id}"

        admin_player = await game_engine.create_player(
            game_id=game.id, telegram_id=user_id, username=username, display_name=display_name, role=PlayerRole.ADMIN
        )

        # Create admin country
        admin_country = await game_engine.create_country(
            game_id=game.id,
            name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
            description="–°—Ç—Ä–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–≥—Ä—ã",
            capital="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ì–æ—Ä–æ–¥",
            population=1000000,
            aspects={
                "economy": 8,
                "military": 7,
                "foreign_policy": 9,
                "territory": 6,
                "technology": 8,
                "religion_culture": 7,
                "governance_law": 10,
                "construction_infrastructure": 7,
                "social_relations": 8,
                "intelligence": 9,
            },
        )

        # Assign country to admin
        await game_engine.assign_player_to_country(admin_player.id, admin_country.id)

        await message.answer(
            f"‚úÖ <b>–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {game_name}\n"
            f"<b>–°–µ—Ç—Ç–∏–Ω–≥:</b> {setting}\n"
            f"<b>–õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏:</b> {years_per_day}\n"
            f"<b>–ú–∞–∫—Å –æ—á–∫–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω:</b> {max_points}\n"
            f"<b>–ú–∞–∫—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω:</b> {max_population:,}\n"
            f"<b>ID –∏–≥—Ä—ã:</b> {game.id}\n\n"
            f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–∞–Ω—É '{admin_country.name}'.\n\n"
            f"–¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∏–≥—Ä–µ –∫–æ–º–∞–Ω–¥–æ–π /register",
            parse_mode="HTML",
        )
        break

    await state.clear()


async def update_game_command(message: Message) -> None:
    """Handle /update_game command - update game settings"""
    user_id = message.from_user.id
    args = message.text.split(" ", 1)

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info - take the first admin player for this user
        result = await game_engine.db.execute(
            select(Player).where(Player.telegram_id == user_id).where(Player.role == PlayerRole.ADMIN).limit(1)
        )
        admin = result.scalar_one_or_none()

        if not admin:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
            return

        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/update_game –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–µ</code>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                "‚Ä¢ <code>name</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã\n"
                "‚Ä¢ <code>setting</code> - —Å–µ—Ç—Ç–∏–Ω–≥ –∏–≥—Ä—ã\n"
                "‚Ä¢ <code>max_players</code> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤\n"
                "‚Ä¢ <code>years_per_day</code> - –ª–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ (1-365)\n"
                "‚Ä¢ <code>max_points</code> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω (10-100)\n"
                "‚Ä¢ <code>max_population</code> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω (1000-1000000000)\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ <code>/update_game name –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã</code>\n"
                "‚Ä¢ <code>/update_game max_population 5000000</code>\n"
                "‚Ä¢ <code>/update_game setting –°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ</code>",
                parse_mode="HTML",
            )
            return

        # Parse parameters - first word is parameter, rest is value
        parts = args[1].split(" ", 1)
        if len(parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return

        param = parts[0].strip()
        value = parts[1].strip()

        updates = {}

        try:
            if param == "name":
                if len(value) < 2 or len(value) > 255:
                    raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤")
                updates["name"] = value
            elif param == "setting":
                if len(value) < 2 or len(value) > 255:
                    raise ValueError("–°–µ—Ç—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤")
                updates["setting"] = value
            elif param == "max_players":
                max_players = int(value)
                if max_players < 1 or max_players > 1000:
                    raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000")
                updates["max_players"] = max_players
            elif param == "years_per_day":
                years_per_day = int(value)
                if years_per_day < 1 or years_per_day > 365:
                    raise ValueError("–õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365")
                updates["years_per_day"] = years_per_day
            elif param == "max_points":
                max_points = int(value)
                if max_points < 10 or max_points > 100:
                    raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 10 –¥–æ 100")
                updates["max_points"] = max_points
            elif param == "max_population":
                max_population = int(value)
                if max_population < 1000 or max_population > 1_000_000_000:
                    raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1,000 –¥–æ 1 –º–ª—Ä–¥")
                updates["max_population"] = max_population
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")

        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}")
            return

        # Update game
        updated_game = await game_engine.update_game_settings(admin.game_id, **updates)

        if not updated_game:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã.")
            return

        # Show updated settings
        param_names = {
            "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
            "setting": "–°–µ—Ç—Ç–∏–Ω–≥",
            "max_players": "–ú–∞–∫—Å –∏–≥—Ä–æ–∫–æ–≤",
            "years_per_day": "–õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏",
            "max_points": "–ú–∞–∫—Å –æ—á–∫–æ–≤",
            "max_population": "–ú–∞–∫—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ",
        }

        changes_text = "\n".join(
            [
                (
                    f"‚Ä¢ <b>{param_names.get(key, key)}:</b> {value:,}"
                    if isinstance(value, int)
                    else f"‚Ä¢ <b>{param_names.get(key, key)}:</b> {value}"
                )
                for key, value in updates.items()
            ]
        )

        await message.answer(
            f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{changes_text}\n\n"
            f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:</b>\n"
            f"‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {updated_game.name}\n"
            f"‚Ä¢ <b>–°–µ—Ç—Ç–∏–Ω–≥:</b> {updated_game.setting}\n"
            f"‚Ä¢ <b>–ú–∞–∫—Å –∏–≥—Ä–æ–∫–æ–≤:</b> {updated_game.max_players}\n"
            f"‚Ä¢ <b>–õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏:</b> {updated_game.years_per_day}\n"
            f"‚Ä¢ <b>–ú–∞–∫—Å –æ—á–∫–æ–≤:</b> {updated_game.max_points}\n"
            f"‚Ä¢ <b>–ú–∞–∫—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ:</b> {updated_game.max_population:,}",
            parse_mode="HTML",
        )
        break


async def event_command(message: Message, state: FSMContext) -> None:
    """Handle /event command - send event message to players"""
    user_id = message.from_user.id
    args = message.text.split(" ", 1)  # /event [country_name]

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info - take the first admin player
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country), selectinload(Player.game))
            .where(Player.telegram_id == user_id)
            .where(Player.role == PlayerRole.ADMIN)
            .limit(1)
        )
        admin = result.scalar_one_or_none()

        if not admin:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.")
            return

        # Get all countries in the same game
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country))
            .where(Player.game_id == admin.game_id)
            .where(Player.country_id.isnot(None))
            .where(Player.role == PlayerRole.PLAYER)
        )
        all_players = result.scalars().all()
        break

    # Get available countries
    available_countries = []
    for player in all_players:
        if player.country:
            available_countries.append(player.country.name)

    if not available_countries:
        await message.answer("‚ùå –í –∏–≥—Ä–µ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    # Check if country name was provided
    if len(args) > 1:
        target_country_name = args[1].strip()

        # Find target country (case-insensitive search by name and synonyms)
        target_player = None
        for player in all_players:
            if player.country:
                # Check official name
                if player.country.name.lower() == target_country_name.lower():
                    target_player = player
                    break

                # Check synonyms
                if player.country.synonyms:
                    for synonym in player.country.synonyms:
                        if synonym.lower() == target_country_name.lower():
                            target_player = player
                            break
                    if target_player:
                        break

        if not target_player:
            countries_list = "\n".join([f"‚Ä¢ {country}" for country in sorted(available_countries)])
            await message.answer(
                f"‚ùå –°—Ç—Ä–∞–Ω–∞ '{target_country_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:\n{countries_list}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/event –Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã</code> –∏–ª–∏ <code>/event</code> –¥–ª—è –≤—Å–µ—Ö",
                parse_mode="HTML",
            )
            return

        # Store target country and ask for message
        await state.update_data(target_player_id=target_player.id, target_country_name=target_player.country.name)
        await message.answer(
            f"üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Å—Ç—Ä–∞–Ω—É {target_player.country.name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>cancel</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode="HTML",
        )
        await state.set_state(AdminStates.waiting_for_event_message)
    else:
        # Send to all countries
        await state.update_data(target_player_id=None, target_country_name="–≤—Å–µ —Å—Ç—Ä–∞–Ω—ã")
        await message.answer(
            "üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>cancel</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode="HTML",
        )
        await state.set_state(AdminStates.waiting_for_event_message)


async def process_event_message(message: Message, state: FSMContext) -> None:
    """Process event message content and send to target(s)"""
    message_content = message.text.strip()

    # Check for cancel command
    if message_content.lower() == "cancel":
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return

    # Validate message content
    if len(message_content) < 3:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>cancel</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode="HTML",
        )
        return

    if len(message_content) > 2000:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>cancel</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode="HTML",
        )
        return

    # Get stored data
    data = await state.get_data()
    target_player_id = data.get("target_player_id")
    target_country_name = data.get("target_country_name")

    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)

        # Get admin player
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country), selectinload(Player.game))
            .where(Player.telegram_id == user_id)
            .where(Player.role == PlayerRole.ADMIN)
            .limit(1)
        )
        admin = result.scalar_one_or_none()

        if not admin:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await state.clear()
            return

        bot = message.bot
        sent_count = 0
        failed_count = 0

        if target_player_id:
            # Send to specific country
            result = await game_engine.db.execute(
                select(Player).options(selectinload(Player.country)).where(Player.id == target_player_id)
            )
            target_player = result.scalar_one_or_none()

            if target_player:
                try:
                    await bot.send_message(target_player.telegram_id, message_content)
                    sent_count = 1
                except Exception as e:
                    print(f"Failed to send event message to player {target_player.telegram_id}: {e}")
                    failed_count = 1
        else:
            # Send to all countries
            result = await game_engine.db.execute(
                select(Player).where(Player.game_id == admin.game_id).where(Player.role == PlayerRole.PLAYER)
            )
            players = result.scalars().all()

            for player in players:
                try:
                    await bot.send_message(player.telegram_id, message_content)
                    sent_count += 1
                except Exception as e:
                    print(f"Failed to send event message to player {player.telegram_id}: {e}")
                    failed_count += 1

        # Send confirmation to admin
        if target_player_id:
            if failed_count == 0:
                await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç—Ä–∞–Ω—É {target_country_name}!")
            else:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Å—Ç—Ä–∞–Ω—É {target_country_name}.")
        else:
            if failed_count == 0:
                await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º ({sent_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)!")
            else:
                await message.answer(
                    f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å—Ç—Ä–∞–Ω–∞–º. " f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {failed_count} —Å—Ç—Ä–∞–Ω–∞–º."
                )
        break

    # Clear state
    await state.clear()


def register_admin_handlers(dp: Dispatcher) -> None:
    """Register admin handlers"""
    dp.message.register(admin_command, Command("admin"))
    dp.message.register(game_stats_command, Command("game_stats"))
    dp.message.register(restart_game_command, Command("restart_game"))
    dp.message.register(update_game_command, Command("update_game"))
    dp.message.register(event_command, Command("event"))
    dp.message.register(process_restart_confirmation, AdminStates.waiting_for_restart_confirmation)
    dp.message.register(process_event_message, AdminStates.waiting_for_event_message)
