"""
Admin handlers
"""

from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from wpg_engine.core.admin_utils import is_admin
from wpg_engine.core.engine import GameEngine
from wpg_engine.models import Player, PlayerRole, get_db


async def admin_command(message: Message) -> None:
    """Handle /admin command - admin panel"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)
        
        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get player info for game details with eager loading
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.game))
            .where(Player.telegram_id == user_id)
        )
        player = result.scalar_one_or_none()
        break

    if not player:
        await message.answer(
            "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "üìã /pending - –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            "üìä /game_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã\n"
            "‚úÖ /approve <user_id> - –æ–¥–æ–±—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            "‚ùå /reject <user_id> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            "üìù /posts - –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
            "‚öñÔ∏è /verdict <post_id> <result> - –≤—ã–Ω–µ—Å—Ç–∏ –≤–µ—Ä–¥–∏–∫—Ç",
            parse_mode="Markdown"
        )
        return

    await message.answer(
        f"‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        f"*–ò–≥—Ä–∞:* {player.game.name}\n"
        f"*–°–µ—Ç—Ç–∏–Ω–≥:* {player.game.setting}\n"
        f"*–°—Ç–∞—Ç—É—Å:* {player.game.status}\n\n"
        f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        f"üìã /pending - –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        f"üìä /game_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã\n"
        f"‚úÖ /approve <user_id> - –æ–¥–æ–±—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        f"‚ùå /reject <user_id> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        f"üìù /posts - –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
        f"‚öñÔ∏è /verdict <post_id> <result> - –≤—ã–Ω–µ—Å—Ç–∏ –≤–µ—Ä–¥–∏–∫—Ç",
        parse_mode="Markdown"
    )


async def pending_command(message: Message) -> None:
    """Handle /pending command - show pending registrations"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)
        
        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info with eager loading
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.game))
            .where(Player.telegram_id == user_id)
        )
        admin = result.scalar_one_or_none()

        # Get pending players with eager loading
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country))
            .where(Player.game_id == admin.game_id)
            .where(Player.role == PlayerRole.PLAYER)
            .where(Player.country_id.is_not(None))
        )
        pending_players = result.scalars().all()
        break

    if not pending_players:
        await message.answer("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
        return

    pending_text = "üìã *–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:*\n\n"

    for player in pending_players:
        country = player.country
        aspects = country.get_aspects_values_only()

        pending_text += f"üë§ *–ò–≥—Ä–æ–∫:* {player.display_name}\n"
        pending_text += f"*Telegram ID:* `{player.telegram_id}`\n"
        pending_text += f"*Username:* @{player.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"

        pending_text += f"üèõÔ∏è *–°—Ç—Ä–∞–Ω–∞:* {country.name}\n"
        pending_text += f"*–°—Ç–æ–ª–∏—Ü–∞:* {country.capital}\n"
        pending_text += f"*–ù–∞—Å–µ–ª–µ–Ω–∏–µ:* {country.population:,}\n"
        pending_text += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {country.description[:100]}...\n\n"

        pending_text += "*–ê—Å–ø–µ–∫—Ç—ã:*\n"
        aspect_names = {
            "economy": "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
            "military": "‚öîÔ∏è –í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ",
            "foreign_policy": "ü§ù –í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞",
            "territory": "üó∫Ô∏è –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
            "technology": "üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å",
            "religion_culture": "üèõÔ∏è –†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞",
            "governance_law": "‚öñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ",
            "construction_infrastructure": "üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
            "social_relations": "üë• –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "intelligence": "üïµÔ∏è –†–∞–∑–≤–µ–¥–∫–∞",
        }

        for aspect, value in aspects.items():
            name = aspect_names.get(aspect, aspect)
            pending_text += f"  {name}: {value}/10\n"

        pending_text += f"\n‚úÖ –û–¥–æ–±—Ä–∏—Ç—å: `/approve {player.telegram_id}`\n"
        pending_text += f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å: `/reject {player.telegram_id}`\n\n"
        pending_text += "‚îÄ" * 30 + "\n\n"

    # Split message if too long
    if len(pending_text) > 4000:
        parts = pending_text.split("‚îÄ" * 30)
        current_message = "üìã *–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:*\n\n"

        for part in parts:
            if part.strip():
                if len(current_message + part) > 4000:
                    await message.answer(current_message, parse_mode="Markdown")
                    current_message = part
                else:
                    current_message += part

        if current_message.strip():
            await message.answer(current_message, parse_mode="Markdown")
    else:
        await message.answer(pending_text, parse_mode="Markdown")


async def approve_command(message: Message) -> None:
    """Handle /approve command"""
    user_id = message.from_user.id
    args = message.text.split()[1:]

    async for db in get_db():
        game_engine = GameEngine(db)
        
        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info
        result = await game_engine.db.execute(
            select(Player).where(Player.telegram_id == user_id)
        )
        admin = result.scalar_one_or_none()

    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –∏–≥—Ä–æ–∫–∞: `/approve 123456789`")
        return

    try:
        target_user_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
        return

        # Find player with eager loading
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country), selectinload(Player.game))
            .where(Player.telegram_id == target_user_id)
        )
        player = result.scalar_one_or_none()

        if not player:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await message.answer(
            f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!*\n\n"
            f"–ò–≥—Ä–æ–∫ *{player.display_name}* —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ "
            f"–∑–∞ —Å—Ç—Ä–∞–Ω—É *{player.country.name}*.",
            parse_mode="Markdown"
        )

        # Notify player (if bot has access to send messages)
        try:
            bot = message.bot
            await bot.send_message(
                target_user_id,
                f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                f"–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏–≥—Ä–µ *{player.game.name}* –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                f"–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Ç—Ä–∞–Ω–æ–π *{player.country.name}*.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                parse_mode="Markdown"
            )
        except Exception:
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º)."
            )


async def reject_command(message: Message) -> None:
    """Handle /reject command"""
    user_id = message.from_user.id
    args = message.text.split()[1:]

    async for db in get_db():
        game_engine = GameEngine(db)
        
        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info
        result = await game_engine.db.execute(
            select(Player).where(Player.telegram_id == user_id)
        )
        admin = result.scalar_one_or_none()

    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –∏–≥—Ä–æ–∫–∞: `/reject 123456789`")
        return

    try:
        target_user_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
        return

        # Find and delete player with eager loading
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country))
            .where(Player.telegram_id == target_user_id)
        )
        player = result.scalar_one_or_none()

        if not player:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        player_name = player.display_name
        country_name = player.country.name if player.country else "–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã"

        # Delete player and country
        if player.country:
            await game_engine.db.delete(player.country)
        await game_engine.db.delete(player)
        await game_engine.db.commit()

        await message.answer(
            f"‚ùå *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n"
            f"–ó–∞—è–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ *{player_name}* ({country_name}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.",
            parse_mode="Markdown"
        )

        # Notify player
        try:
            bot = message.bot
            await bot.send_message(
                target_user_id,
                "‚ùå *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.",
                parse_mode="Markdown"
            )
        except Exception:
            pass


async def game_stats_command(message: Message) -> None:
    """Handle /game_stats command"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)
        
        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info
        result = await game_engine.db.execute(
            select(Player).where(Player.telegram_id == user_id)
        )
        admin = result.scalar_one_or_none()

        stats = await game_engine.get_game_statistics(admin.game_id)

        await message.answer(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã*\n\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {stats['game_name']}\n"
            f"*–°—Ç–∞—Ç—É—Å:* {stats['status']}\n"
            f"*–°—Ç—Ä–∞–Ω:* {stats['countries_count']}\n"
            f"*–ò–≥—Ä–æ–∫–æ–≤:* {stats['players_count']}\n"
            f"*–ü–æ—Å—Ç–æ–≤:* {stats['posts_count']}\n"
            f"*–°–æ–∑–¥–∞–Ω–∞:* {stats['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"*–û–±–Ω–æ–≤–ª–µ–Ω–∞:* {stats['updated_at'].strftime('%d.%m.%Y %H:%M')}",
            parse_mode="Markdown"
        )


async def posts_command(message: Message) -> None:
    """Handle /posts command - show posts without verdicts"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)
        
        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info
        result = await game_engine.db.execute(
            select(Player).where(Player.telegram_id == user_id)
        )
        admin = result.scalar_one_or_none()

        # Get posts without verdicts
        posts = await game_engine.get_game_posts(admin.game_id)
        posts_without_verdicts = [post for post in posts if not post.verdicts]

        if not posts_without_verdicts:
            await message.answer("üìù –ù–µ—Ç –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–¥–∏–∫—Ç–∞.")
            return

        posts_text = "üìù *–ü–æ—Å—Ç—ã –±–µ–∑ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤:*\n\n"

        for post in posts_without_verdicts:
            posts_text += f"*–ü–æ—Å—Ç #{post.id}*\n"
            posts_text += f"*–ê–≤—Ç–æ—Ä:* {post.author.country.name if post.author.country else post.author.display_name}\n"
            posts_text += f"*–î–∞—Ç–∞:* {post.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            posts_text += f"*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*\n{post.content}\n\n"
            posts_text += f"‚öñÔ∏è –í–µ—Ä–¥–∏–∫—Ç: `/verdict {post.id} <—Ä–µ–∑—É–ª—å—Ç–∞—Ç>`\n\n"
            posts_text += "‚îÄ" * 30 + "\n\n"

        # Split if too long
        if len(posts_text) > 4000:
            parts = posts_text.split("‚îÄ" * 30)
            current_message = "üìù *–ü–æ—Å—Ç—ã –±–µ–∑ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤:*\n\n"

            for part in parts:
                if part.strip():
                    if len(current_message + part) > 4000:
                        await message.answer(current_message, parse_mode="Markdown")
                        current_message = part
                    else:
                        current_message += part

            if current_message.strip():
                await message.answer(current_message, parse_mode="Markdown")
        else:
            await message.answer(posts_text, parse_mode="Markdown")


def register_admin_handlers(dp: Dispatcher) -> None:
    """Register admin handlers"""
    dp.message.register(admin_command, Command("admin"))
    dp.message.register(pending_command, Command("pending"))
    dp.message.register(approve_command, Command("approve"))
    dp.message.register(reject_command, Command("reject"))
    dp.message.register(game_stats_command, Command("game_stats"))
    dp.message.register(posts_command, Command("posts"))
