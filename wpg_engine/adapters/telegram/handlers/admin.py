"""
Admin handlers
"""

from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from wpg_engine.core.admin_utils import is_admin
from wpg_engine.core.engine import GameEngine
from wpg_engine.models import Player, PlayerRole, get_db


async def admin_command(message: Message) -> None:
    """Handle /admin command - admin panel"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get player info for game details with eager loading
        result = await game_engine.db.execute(
            select(Player).options(selectinload(Player.game)).where(Player.telegram_id == user_id)
        )
        player = result.scalar_one_or_none()
        break

    if not player:
        await message.answer(
            "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="Markdown",
        )
        return

    await message.answer(
        f"‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        f"*–ò–≥—Ä–∞:* {player.game.name}\n"
        f"*–°–µ—Ç—Ç–∏–Ω–≥:* {player.game.setting}\n"
        f"*–°—Ç–∞—Ç—É—Å:* {player.game.status}",
        parse_mode="Markdown",
    )


# Removed pending_command - registrations are now sent directly to admin


async def approve_command(message: Message) -> None:
    """Handle /approve command"""
    user_id = message.from_user.id
    args = message.text.split()[1:]

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info
        result = await game_engine.db.execute(select(Player).where(Player.telegram_id == user_id))
        result.scalar_one_or_none()

    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –∏–≥—Ä–æ–∫–∞: `/approve 123456789`")
        return

    try:
        target_user_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
        return

        # Find player with eager loading
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country), selectinload(Player.game))
            .where(Player.telegram_id == target_user_id)
        )
        player = result.scalar_one_or_none()

        if not player:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await message.answer(
            f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!*\n\n"
            f"–ò–≥—Ä–æ–∫ *{player.display_name}* —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ "
            f"–∑–∞ —Å—Ç—Ä–∞–Ω—É *{player.country.name}*.",
            parse_mode="Markdown",
        )

        # Notify player (if bot has access to send messages)
        try:
            bot = message.bot
            await bot.send_message(
                target_user_id,
                f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                f"–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏–≥—Ä–µ *{player.game.name}* –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                f"–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Ç—Ä–∞–Ω–æ–π *{player.country.name}*.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                parse_mode="Markdown",
            )
        except Exception:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º).")


async def reject_command(message: Message) -> None:
    """Handle /reject command"""
    user_id = message.from_user.id
    args = message.text.split()[1:]

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info
        result = await game_engine.db.execute(select(Player).where(Player.telegram_id == user_id))
        result.scalar_one_or_none()

    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –∏–≥—Ä–æ–∫–∞: `/reject 123456789`")
        return

    try:
        target_user_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")
        return

        # Find and delete player with eager loading
        result = await game_engine.db.execute(
            select(Player).options(selectinload(Player.country)).where(Player.telegram_id == target_user_id)
        )
        player = result.scalar_one_or_none()

        if not player:
            await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        player_name = player.display_name
        country_name = player.country.name if player.country else "–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã"

        # Delete player and country
        if player.country:
            await game_engine.db.delete(player.country)
        await game_engine.db.delete(player)
        await game_engine.db.commit()

        await message.answer(
            f"‚ùå *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n" f"–ó–∞—è–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ *{player_name}* ({country_name}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.",
            parse_mode="Markdown",
        )

        # Notify player
        try:
            bot = message.bot
            await bot.send_message(
                target_user_id,
                "‚ùå *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.",
                parse_mode="Markdown",
            )
        except Exception:
            pass


async def game_stats_command(message: Message) -> None:
    """Handle /game_stats command"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info
        result = await game_engine.db.execute(select(Player).where(Player.telegram_id == user_id))
        admin = result.scalar_one_or_none()

        stats = await game_engine.get_game_statistics(admin.game_id)

        await message.answer(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã*\n\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {stats['game_name']}\n"
            f"*–°—Ç–∞—Ç—É—Å:* {stats['status']}\n"
            f"*–°—Ç—Ä–∞–Ω:* {stats['countries_count']}\n"
            f"*–ò–≥—Ä–æ–∫–æ–≤:* {stats['players_count']}\n"
            f"*–ü–æ—Å—Ç–æ–≤:* {stats['posts_count']}\n"
            f"*–°–æ–∑–¥–∞–Ω–∞:* {stats['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"*–û–±–Ω–æ–≤–ª–µ–Ω–∞:* {stats['updated_at'].strftime('%d.%m.%Y %H:%M')}",
            parse_mode="Markdown",
        )


async def posts_command(message: Message) -> None:
    """Handle /posts command - show posts without verdicts"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # Get admin info
        result = await game_engine.db.execute(select(Player).where(Player.telegram_id == user_id))
        admin = result.scalar_one_or_none()

        # Get posts without verdicts
        posts = await game_engine.get_game_posts(admin.game_id)
        posts_without_verdicts = [post for post in posts if not post.verdicts]

        if not posts_without_verdicts:
            await message.answer("üìù –ù–µ—Ç –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–¥–∏–∫—Ç–∞.")
            return

        posts_text = "üìù *–ü–æ—Å—Ç—ã –±–µ–∑ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤:*\n\n"

        for post in posts_without_verdicts:
            posts_text += f"*–ü–æ—Å—Ç #{post.id}*\n"
            posts_text += f"*–ê–≤—Ç–æ—Ä:* {post.author.country.name if post.author.country else post.author.display_name}\n"
            posts_text += f"*–î–∞—Ç–∞:* {post.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            posts_text += f"*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*\n{post.content}\n\n"
            posts_text += f"‚öñÔ∏è –í–µ—Ä–¥–∏–∫—Ç: `/verdict {post.id} <—Ä–µ–∑—É–ª—å—Ç–∞—Ç>`\n\n"
            posts_text += "‚îÄ" * 30 + "\n\n"

        # Split if too long
        if len(posts_text) > 4000:
            parts = posts_text.split("‚îÄ" * 30)
            current_message = "üìù *–ü–æ—Å—Ç—ã –±–µ–∑ –≤–µ—Ä–¥–∏–∫—Ç–æ–≤:*\n\n"

            for part in parts:
                if part.strip():
                    if len(current_message + part) > 4000:
                        await message.answer(current_message, parse_mode="Markdown")
                        current_message = part
                    else:
                        current_message += part

            if current_message.strip():
                await message.answer(current_message, parse_mode="Markdown")
        else:
            await message.answer(posts_text, parse_mode="Markdown")


async def create_game_command(message: Message) -> None:
    """Handle /create_game command"""
    user_id = message.from_user.id
    args = message.text.split(" ", 1)

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is admin
        if not await is_admin(user_id, game_engine.db):
            # Check if user is admin from .env
            from wpg_engine.config.settings import settings

            if not settings.telegram.admin_id or user_id != settings.telegram.admin_id:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/create_game –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã | –°–µ—Ç—Ç–∏–Ω–≥ | –õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ | –ú–∞–∫—Å –æ—á–∫–æ–≤</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/create_game –î—Ä–µ–≤–Ω–∏–π –º–∏—Ä | –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å | 10 | 30</code>\n"
                "–ú–∞–∫—Å –æ—á–∫–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ—á–∫–æ–≤ –¥–ª—è –∞—Å–ø–µ–∫—Ç–æ–≤ —Å—Ç—Ä–∞–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)",
                parse_mode="HTML",
            )
            return

        try:
            # Parse arguments
            parts = [part.strip() for part in args[1].split("|")]
            if len(parts) < 3 or len(parts) > 4:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

            game_name, setting, years_per_day_str = parts[:3]
            max_points_str = parts[3] if len(parts) == 4 else "30"

            years_per_day = int(years_per_day_str)
            max_points = int(max_points_str)

            if not game_name or not setting:
                raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ —Å–µ—Ç—Ç–∏–Ω–≥ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")

            if years_per_day < 1 or years_per_day > 365:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365")

            if max_points < 10 or max_points > 100:
                raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 100")

        except ValueError as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/create_game –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã | –°–µ—Ç—Ç–∏–Ω–≥ | –õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏ | –ú–∞–∫—Å –æ—á–∫–æ–≤</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/create_game –î—Ä–µ–≤–Ω–∏–π –º–∏—Ä | –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç—å | 10 | 30</code>",
                parse_mode="HTML",
            )
            return

        # Create game
        game = await game_engine.create_game(
            name=game_name,
            description=f"–ò–≥—Ä–∞ –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ '{setting}'",
            setting=setting,
            max_players=20,
            years_per_day=years_per_day,
            max_points=max_points,
        )

        # Create admin player
        username = message.from_user.username
        display_name = message.from_user.full_name or f"Admin_{user_id}"

        admin_player = await game_engine.create_player(
            game_id=game.id, telegram_id=user_id, username=username, display_name=display_name, role=PlayerRole.ADMIN
        )

        # Create admin country
        admin_country = await game_engine.create_country(
            game_id=game.id,
            name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞",
            description="–°—Ç—Ä–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–≥—Ä—ã",
            capital="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ì–æ—Ä–æ–¥",
            population=1000000,
            aspects={
                "economy": 8,
                "military": 7,
                "foreign_policy": 9,
                "territory": 6,
                "technology": 8,
                "religion_culture": 7,
                "governance_law": 10,
                "construction_infrastructure": 7,
                "social_relations": 8,
                "intelligence": 9,
            },
        )

        # Assign country to admin
        await game_engine.assign_player_to_country(admin_player.id, admin_country.id)

        await message.answer(
            f"‚úÖ <b>–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {game_name}\n"
            f"<b>–°–µ—Ç—Ç–∏–Ω–≥:</b> {setting}\n"
            f"<b>–õ–µ—Ç –∑–∞ —Å—É—Ç–∫–∏:</b> {years_per_day}\n"
            f"<b>–ú–∞–∫—Å –æ—á–∫–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω:</b> {max_points}\n"
            f"<b>ID –∏–≥—Ä—ã:</b> {game.id}\n\n"
            f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–∞–Ω—É '{admin_country.name}'.\n\n"
            f"–¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∏–≥—Ä–µ –∫–æ–º–∞–Ω–¥–æ–π /register",
            parse_mode="HTML",
        )
        break


def register_admin_handlers(dp: Dispatcher) -> None:
    """Register admin handlers"""
    dp.message.register(admin_command, Command("admin"))
    dp.message.register(approve_command, Command("approve"))
    dp.message.register(reject_command, Command("reject"))
    dp.message.register(game_stats_command, Command("game_stats"))
    dp.message.register(posts_command, Command("posts"))
    dp.message.register(create_game_command, Command("create_game"))
