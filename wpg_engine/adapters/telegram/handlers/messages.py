"""
Message handlers for player-admin communication
"""

from aiogram import Dispatcher
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from wpg_engine.core.admin_utils import is_admin
from wpg_engine.core.engine import GameEngine
from wpg_engine.models import Player, PlayerRole, get_db


async def handle_text_message(message: Message) -> None:
    """Handle all text messages that are not commands"""
    user_id = message.from_user.id
    content = message.text.strip()

    # Skip if message is too short or too long
    if len(content) < 3:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")
        return

    if len(content) > 2000:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    async for db in get_db():
        game_engine = GameEngine(db)

        # Get player
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country), selectinload(Player.game))
            .where(Player.telegram_id == user_id)
        )
        player = result.scalar_one_or_none()
        break

    if not player:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return

    # Check if this is an admin replying to a message
    if await is_admin(user_id, game_engine.db) and message.reply_to_message:
        await handle_admin_reply(message, player, game_engine)
        return

    # Regular player message - send to admin
    await handle_player_message(message, player, game_engine)


async def handle_player_message(message: Message, player: Player, game_engine: GameEngine) -> None:
    """Handle message from player - save and forward to admin"""
    content = message.text.strip()

    # Save message to database
    saved_message = await game_engine.create_message(
        player_id=player.id,
        game_id=player.game_id,
        content=content,
        telegram_message_id=message.message_id,
        is_admin_reply=False,
    )

    # Confirm to player
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

    # Find admin to send message to
    result = await game_engine.db.execute(
        select(Player).where(Player.game_id == player.game_id).where(Player.role == PlayerRole.ADMIN)
    )
    admin = result.scalar_one_or_none()

    if admin and admin.telegram_id:
        try:
            # Format message for admin
            country_name = player.country.name if player.country else "–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã"
            admin_message = (
                f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞</b>\n\n"
                f"<b>–û—Ç:</b> {player.display_name} (ID: {player.telegram_id})\n"
                f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name}\n"
                f"<b>–ò–≥—Ä–∞:</b> {player.game.name}\n\n"
                f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{content}"
            )

            # Send to admin
            bot = message.bot
            sent_message = await bot.send_message(admin.telegram_id, admin_message, parse_mode="HTML")

            # Update saved message with admin's telegram message ID for reply functionality
            saved_message.telegram_message_id = sent_message.message_id
            await game_engine.db.commit()

        except Exception as e:
            print(f"Failed to send message to admin: {e}")
            await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥—Ä–µ.")


async def handle_admin_reply(message: Message, admin: Player, game_engine: GameEngine) -> None:
    """Handle admin reply to player message or registration"""
    if not message.reply_to_message:
        return

    content = message.text.strip().lower()

    # Check if this is a registration approval/rejection
    if content in ["–æ–¥–æ–±—Ä–∏—Ç—å", "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"]:
        await handle_registration_decision(message, admin, game_engine, content)
        return

    # Find original message by telegram message ID
    original_message = await game_engine.get_message_by_telegram_id(message.reply_to_message.message_id)

    if not original_message:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    content = message.text.strip()

    # Save admin reply
    await game_engine.create_message(
        player_id=original_message.player_id,
        game_id=original_message.game_id,
        content=content,
        reply_to_id=original_message.id,
        is_admin_reply=True,
    )

    # Send reply to original player
    try:
        bot = message.bot
        reply_text = (
            f"üì© <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"<b>–ù–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<i>{original_message.content[:100]}{'...' if len(original_message.content) > 100 else ''}</i>\n\n"
            f"<b>–û—Ç–≤–µ—Ç:</b>\n{content}"
        )

        await bot.send_message(original_message.player.telegram_id, reply_text, parse_mode="HTML")

        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É!")

    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫—É: {e}")


async def handle_registration_decision(message: Message, admin: Player, game_engine: GameEngine, decision: str) -> None:
    """Handle admin decision on registration"""
    # Extract player telegram ID from the replied message
    replied_text = message.reply_to_message.text

    # Find telegram ID in the message
    import re

    telegram_id_match = re.search(r"Telegram ID:</b> <code>(\d+)</code>", replied_text)
    if not telegram_id_match:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Telegram ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    player_telegram_id = int(telegram_id_match.group(1))

    # Find the player
    result = await game_engine.db.execute(
        select(Player)
        .options(selectinload(Player.country))
        .where(Player.telegram_id == player_telegram_id)
        .where(Player.game_id == admin.game_id)
    )
    player = result.scalar_one_or_none()

    if not player:
        await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        bot = message.bot

        if decision == "–æ–¥–æ–±—Ä–∏—Ç—å":
            # Approve registration - player is already created, just notify
            await bot.send_message(
                player_telegram_id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏–≥—Ä–µ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                f"–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Ç—Ä–∞–Ω–æ–π <b>{player.country.name}</b>.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                parse_mode="HTML",
            )

            await message.answer(
                f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                f"–ò–≥—Ä–æ–∫ <b>{player.display_name}</b> —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ "
                f"–∑–∞ —Å—Ç—Ä–∞–Ω—É <b>{player.country.name}</b>.",
                parse_mode="HTML",
            )

        elif decision == "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å":
            # Reject registration - delete player and country
            country_name = player.country.name if player.country else "–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã"
            player_name = player.display_name

            # Delete player and country
            if player.country:
                await game_engine.db.delete(player.country)
            await game_engine.db.delete(player)
            await game_engine.db.commit()

            await bot.send_message(
                player_telegram_id,
                "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.",
                parse_mode="HTML",
            )

            await message.answer(
                f"‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"–ó–∞—è–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ <b>{player_name}</b> ({country_name}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.",
                parse_mode="HTML",
            )

    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–∞: {e}")


def register_message_handlers(dp: Dispatcher) -> None:
    """Register message handlers"""
    # Handle all text messages that are not commands
    dp.message.register(handle_text_message, lambda message: message.text and not message.text.startswith("/"))
