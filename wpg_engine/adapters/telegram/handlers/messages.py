"""
Message handlers for player-admin communication
"""

from aiogram import Dispatcher
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from wpg_engine.adapters.telegram.utils import escape_html, escape_markdown
from wpg_engine.core.admin_utils import is_admin
from wpg_engine.core.engine import GameEngine
from wpg_engine.models import Player, PlayerRole, get_db


async def handle_text_message(message: Message) -> None:
    """Handle all text messages that are not commands"""
    user_id = message.from_user.id
    content = message.text.strip()

    # Skip if message is too short or too long
    if len(content) < 3:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")
        return

    if len(content) > 2000:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    async for db in get_db():
        game_engine = GameEngine(db)

        # Get player
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country), selectinload(Player.game))
            .where(Player.telegram_id == user_id)
        )
        player = result.scalar_one_or_none()

        if not player:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
            return

        # Check if this is an admin replying to a message or sending a message with ID
        if await is_admin(user_id, game_engine.db):
            # Check if this is a reply to a message (for registration decisions)
            if message.reply_to_message:
                await handle_admin_reply(message, player, game_engine)
                return
            # Check if message contains message ID for direct reply
            import re

            if re.search(r"(?:ID —Å–æ–æ–±—â–µ–Ω–∏—è|msg|message):\s*\d+|^\d+\s+", content, re.IGNORECASE):
                await handle_admin_reply(message, player, game_engine)
                return

        # Regular player message - send to admin
        await handle_player_message(message, player, game_engine)
        break


async def handle_player_message(message: Message, player: Player, game_engine: GameEngine) -> None:
    """Handle message from player - save and forward to admin"""
    content = message.text.strip()

    # Confirm to player
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

    # Find admin to send message to
    result = await game_engine.db.execute(
        select(Player).where(Player.game_id == player.game_id).where(Player.role == PlayerRole.ADMIN)
    )
    admin = result.scalar_one_or_none()

    if admin and admin.telegram_id:
        try:
            # Format message for admin (no ID needed)
            country_name = player.country.name if player.country else "–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã"
            admin_message = (
                f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞</b>\n\n"
                f"<b>–û—Ç:</b> {escape_html(player.display_name)} (ID: {player.telegram_id})\n"
                f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {escape_html(country_name)}\n\n"
                f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{escape_html(content)}"
            )

            # Send to admin first
            bot = message.bot
            sent_message = await bot.send_message(admin.telegram_id, admin_message, parse_mode="HTML")

            # Now save message to database with admin's telegram message ID
            await game_engine.create_message(
                player_id=player.id,
                game_id=player.game_id,
                content=content,
                telegram_message_id=message.message_id,
                admin_telegram_message_id=sent_message.message_id,
                is_admin_reply=False,
            )

        except Exception as e:
            print(f"Failed to send message to admin: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥—Ä–µ.")


async def handle_admin_reply(message: Message, admin: Player, game_engine: GameEngine) -> None:
    """Handle admin reply to player message, registration, or country editing"""
    content = message.text.strip()

    # Check if this is a registration approval/rejection (when replying to registration message)
    if message.reply_to_message and (content.lower() == "–æ–¥–æ–±—Ä–∏—Ç—å" or content.lower().startswith("–æ—Ç–∫–ª–æ–Ω–∏—Ç—å")):
        decision = "–æ–¥–æ–±—Ä–∏—Ç—å" if content.lower() == "–æ–¥–æ–±—Ä–∏—Ç—å" else "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
        await handle_registration_decision(message, admin, game_engine, decision)
        return

    # Check if this is a country editing reply (when replying to country info message)
    if message.reply_to_message and message.reply_to_message.text:
        replied_text = message.reply_to_message.text
        import re

        # Look for country editing marker
        country_match = re.search(r"\[EDIT_COUNTRY:(\d+)\]", replied_text)
        if country_match:
            country_id = int(country_match.group(1))
            await handle_country_edit(message, admin, game_engine, country_id, content)
            return

    # If admin is replying to a message, find the original player message in database
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
        return

    # Find the original player message by the admin message ID that was replied to
    original_message = await game_engine.get_message_by_admin_telegram_id(message.reply_to_message.message_id)

    if not original_message:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞.")
        return

    # Save admin reply
    await game_engine.create_message(
        player_id=original_message.player_id,
        game_id=original_message.game_id,
        content=content,
        reply_to_id=original_message.id,
        is_admin_reply=True,
    )

    # Send reply to original player as a reply to their original message
    try:
        bot = message.bot

        # Send the admin's response as a reply to the original player's message
        await bot.send_message(
            original_message.player.telegram_id,
            escape_html(content),
            reply_to_message_id=original_message.telegram_message_id,
            parse_mode="HTML",
        )

        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É!")

    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫—É: {e}")


async def handle_country_edit(
    message: Message,
    admin: Player,
    game_engine: GameEngine,
    country_id: int,
    content: str,
) -> None:
    """Handle country editing by admin"""

    # Get the country
    country = await game_engine.get_country(country_id)
    if not country:
        await message.answer("‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # Parse the editing command
    # Format examples:
    # "—ç–∫–æ–Ω–æ–º–∏–∫–∞ 8" - set economy value to 8
    # "—ç–∫–æ–Ω–æ–º–∏–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏" - set economy description
    # "–Ω–∞–∑–≤–∞–Ω–∏–µ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã" - set country name
    # "–æ–ø–∏—Å–∞–Ω–∏–µ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã" - set country description
    # "—Å—Ç–æ–ª–∏—Ü–∞ –ù–æ–≤–∞—è —Å—Ç–æ–ª–∏—Ü–∞" - set capital
    # "–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 5000000" - set population

    # Aspect mappings
    aspect_mappings = {
        "—ç–∫–æ–Ω–æ–º–∏–∫–∞": "economy",
        "–≤–æ–µ–Ω–Ω–æ–µ": "military",
        "–≤–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ": "military",
        "–∞—Ä–º–∏—è": "military",
        "–≤–Ω–µ—à–Ω—è—è": "foreign_policy",
        "–≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞": "foreign_policy",
        "–¥–∏–ø–ª–æ–º–∞—Ç–∏—è": "foreign_policy",
        "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è": "territory",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "technology",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å": "technology",
        "–Ω–∞—É–∫–∞": "technology",
        "—Ä–µ–ª–∏–≥–∏—è": "religion_culture",
        "–∫—É–ª—å—Ç—É—Ä–∞": "religion_culture",
        "—Ä–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞": "religion_culture",
        "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "governance_law",
        "–ø—Ä–∞–≤–æ": "governance_law",
        "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ": "governance_law",
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": "construction_infrastructure",
        "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": "construction_infrastructure",
        "–æ–±—â–µ—Å—Ç–≤–æ": "social_relations",
        "–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è": "social_relations",
        "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ": "social_relations",
        "—Ä–∞–∑–≤–µ–¥–∫–∞": "intelligence",
        "—à–ø–∏–æ–Ω–∞–∂": "intelligence",
    }

    # Try to parse different formats
    lines = content.strip().split("\n")
    success_messages = []
    error_messages = []

    for line in lines:
        line = line.strip()
        if not line:
            continue

        # Check for basic country info updates
        if line.lower().startswith("–Ω–∞–∑–≤–∞–Ω–∏–µ "):
            new_name = line[9:].strip()
            if new_name:
                await game_engine.update_country_basic_info(country_id, name=new_name)
                success_messages.append(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {escape_html(new_name)}")
            else:
                error_messages.append("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            continue

        elif line.lower().startswith("–æ–ø–∏—Å–∞–Ω–∏–µ "):
            new_description = line[9:].strip()
            await game_engine.update_country_basic_info(country_id, description=new_description)
            success_messages.append("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            continue

        elif line.lower().startswith("—Å—Ç–æ–ª–∏—Ü–∞ "):
            new_capital = line[8:].strip()
            await game_engine.update_country_basic_info(country_id, capital=new_capital)
            success_messages.append(f"‚úÖ –°—Ç–æ–ª–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {escape_html(new_capital)}")
            continue

        elif line.lower().startswith("–Ω–∞—Å–µ–ª–µ–Ω–∏–µ "):
            try:
                new_population = int(line[10:].strip().replace(",", "").replace(" ", ""))
                await game_engine.update_country_basic_info(country_id, population=new_population)
                success_messages.append(f"‚úÖ –ù–∞—Å–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_population:,}")
            except ValueError:
                error_messages.append("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è")
            continue

        elif line.lower().startswith("—Å–∏–Ω–æ–Ω–∏–º—ã "):
            synonyms_text = line[9:].strip()
            if synonyms_text.lower() == "–æ—á–∏—Å—Ç–∏—Ç—å":
                # Clear all synonyms
                await game_engine.update_country_synonyms(country_id, [])
                success_messages.append("‚úÖ –°–∏–Ω–æ–Ω–∏–º—ã –æ—á–∏—â–µ–Ω—ã")
            else:
                # Parse synonyms (comma-separated)
                new_synonyms = [s.strip() for s in synonyms_text.split(",") if s.strip()]
                if new_synonyms:
                    # Check for conflicts with existing countries and their synonyms
                    conflict_found = False
                    from wpg_engine.models import Country

                    result = await game_engine.db.execute(
                        select(Country).where(Country.game_id == country.game_id).where(Country.id != country_id)
                    )
                    other_countries = result.scalars().all()

                    for synonym in new_synonyms:
                        for other_country in other_countries:
                            # Check against official names
                            if other_country.name.lower() == synonym.lower():
                                error_messages.append(
                                    f"‚ùå –°–∏–Ω–æ–Ω–∏–º '{synonym}' –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω—ã '{other_country.name}'"
                                )
                                conflict_found = True
                                break

                            # Check against other synonyms
                            if other_country.synonyms:
                                for other_synonym in other_country.synonyms:
                                    if other_synonym.lower() == synonym.lower():
                                        error_messages.append(
                                            f"‚ùå –°–∏–Ω–æ–Ω–∏–º '{synonym}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–æ–π '{other_country.name}'"
                                        )
                                        conflict_found = True
                                        break
                            if conflict_found:
                                break
                        if conflict_found:
                            break

                    if not conflict_found:
                        await game_engine.update_country_synonyms(country_id, new_synonyms)
                        escaped_synonyms = [escape_html(syn) for syn in new_synonyms]
                        success_messages.append(f"‚úÖ –°–∏–Ω–æ–Ω–∏–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(escaped_synonyms)}")
                else:
                    error_messages.append("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–∏–Ω–æ–Ω–∏–º—ã")
            continue

        # Parse aspect updates
        found_aspect = None
        for key, aspect in aspect_mappings.items():
            if line.lower().startswith(key.lower() + " "):
                found_aspect = aspect
                remaining = line[len(key) :].strip()
                break

        if not found_aspect:
            error_messages.append(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Å–ø–µ–∫—Ç: {line}")
            continue

        # Check if it's a description update
        if remaining.lower().startswith("–æ–ø–∏—Å–∞–Ω–∏–µ "):
            new_description = remaining[9:].strip()
            result = await game_engine.update_country_aspect_description(country_id, found_aspect, new_description)
            if result:
                success_messages.append(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–∞ '{key}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                error_messages.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–∞ '{key}'")
        else:
            # Try to parse as value update
            try:
                new_value = int(remaining.strip())
                if 1 <= new_value <= 10:
                    result = await game_engine.update_country_aspect_value(country_id, found_aspect, new_value)
                    if result:
                        success_messages.append(f"‚úÖ {key.capitalize()}: {new_value}/10")
                    else:
                        error_messages.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {key}")
                else:
                    error_messages.append(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ {key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            except ValueError:
                error_messages.append(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {key}: {remaining}")

    # Send response
    response = f"üèõÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã {escape_markdown(country.name)}*\n\n"

    if success_messages:
        response += "*–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:*\n" + "\n".join(success_messages) + "\n\n"

    if error_messages:
        response += "*–û—à–∏–±–∫–∏:*\n" + "\n".join(error_messages) + "\n\n"

    if not success_messages and not error_messages:
        response += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"

    response += "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
    response += "‚Ä¢ `–Ω–∞–∑–≤–∞–Ω–∏–µ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`\n"
    response += "‚Ä¢ `–æ–ø–∏—Å–∞–Ω–∏–µ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`\n"
    response += "‚Ä¢ `—Å—Ç–æ–ª–∏—Ü–∞ –ù–æ–≤–∞—è —Å—Ç–æ–ª–∏—Ü–∞`\n"
    response += "‚Ä¢ `–Ω–∞—Å–µ–ª–µ–Ω–∏–µ 1000000`\n"
    response += "‚Ä¢ `—Å–∏–Ω–æ–Ω–∏–º—ã –•–§, –•—É–∞–Ω` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n"
    response += "‚Ä¢ `—Å–∏–Ω–æ–Ω–∏–º—ã –æ—á–∏—Å—Ç–∏—Ç—å` - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–∏–Ω–æ–Ω–∏–º—ã\n"
    response += "‚Ä¢ `—ç–∫–æ–Ω–æ–º–∏–∫–∞ 8` - –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ\n"
    response += "‚Ä¢ `—ç–∫–æ–Ω–æ–º–∏–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ` - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n"
    response += "‚Ä¢ –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤: –≤–æ–µ–Ω–Ω–æ–µ, –≤–Ω–µ—à–Ω—è—è, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ä–µ–ª–∏–≥–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –æ–±—â–µ—Å—Ç–≤–æ, —Ä–∞–∑–≤–µ–¥–∫–∞"

    await message.answer(response, parse_mode="Markdown")


async def handle_registration_decision(message: Message, admin: Player, game_engine: GameEngine, decision: str) -> None:
    """Handle admin decision on registration"""
    # Extract player telegram ID from the replied message
    replied_text = message.reply_to_message.text

    # Find telegram ID in the message
    import re

    telegram_id_match = re.search(r"Telegram ID:\s*(\d+)", replied_text)
    if not telegram_id_match:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Telegram ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    player_telegram_id = int(telegram_id_match.group(1))

    # Find the player
    result = await game_engine.db.execute(
        select(Player)
        .options(selectinload(Player.country))
        .where(Player.telegram_id == player_telegram_id)
        .where(Player.game_id == admin.game_id)
    )
    player = result.scalar_one_or_none()

    if not player:
        await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        bot = message.bot

        if decision == "–æ–¥–æ–±—Ä–∏—Ç—å":
            # Approve registration - player is already created, just notify
            await bot.send_message(
                player_telegram_id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏–≥—Ä–µ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                f"–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Ç—Ä–∞–Ω–æ–π <b>{escape_html(player.country.name)}</b>.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                parse_mode="HTML",
            )

            await message.answer(
                f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                f"–ò–≥—Ä–æ–∫ <b>{escape_html(player.display_name)}</b> —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ "
                f"–∑–∞ —Å—Ç—Ä–∞–Ω—É <b>{escape_html(player.country.name)}</b>.",
                parse_mode="HTML",
            )

        elif decision == "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å":
            # Extract rejection reason from the message
            rejection_reason = ""
            message_text = message.text.strip()
            if message_text.lower().startswith("–æ—Ç–∫–ª–æ–Ω–∏—Ç—å "):
                rejection_reason = message_text[10:].strip()  # Remove "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å " prefix

            # Reject registration - delete player and country
            country_name = player.country.name if player.country else "–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã"
            player_name = player.display_name

            # Delete player and country
            if player.country:
                await game_engine.db.delete(player.country)
            await game_engine.db.delete(player)
            await game_engine.db.commit()

            # Prepare rejection message for player
            rejection_message = (
                "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )

            if rejection_reason:
                rejection_message += f"\n\n<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>\n{escape_html(rejection_reason)}"

            rejection_message += "\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register."

            await bot.send_message(
                player_telegram_id,
                rejection_message,
                parse_mode="HTML",
            )

            # Prepare confirmation message for admin
            admin_message = (
                f"‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"–ó–∞—è–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ <b>{escape_html(player_name)}</b> ({escape_html(country_name)}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞."
            )

            if rejection_reason:
                admin_message += f"\n\n<b>–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞:</b>\n{escape_html(rejection_reason)}"

            await message.answer(admin_message, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–∞: {e}")


def register_message_handlers(dp: Dispatcher) -> None:
    """Register message handlers"""
    # Handle all text messages that are not commands
    dp.message.register(
        handle_text_message,
        lambda message: message.text and not message.text.startswith("/"),
    )
