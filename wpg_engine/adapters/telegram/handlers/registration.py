"""
Registration handlers
"""

from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from wpg_engine.core.admin_utils import determine_player_role
from wpg_engine.core.engine import GameEngine
from wpg_engine.models import Country, Game, GameStatus, Player, get_db
from wpg_engine.models.message import Message as MessageModel


class RegistrationStates(StatesGroup):
    """Registration states"""

    waiting_for_country_name = State()
    waiting_for_country_description = State()
    waiting_for_economy = State()
    waiting_for_military = State()
    waiting_for_foreign_policy = State()
    waiting_for_territory = State()
    waiting_for_technology = State()
    waiting_for_religion_culture = State()
    waiting_for_governance_law = State()
    waiting_for_construction_infrastructure = State()
    waiting_for_social_relations = State()
    waiting_for_intelligence = State()
    waiting_for_capital = State()
    waiting_for_population = State()

    # Re-registration confirmation state
    waiting_for_reregistration_confirmation = State()


ASPECT_NAMES = {
    "economy": "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
    "military": "–í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ",
    "foreign_policy": "–í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞",
    "territory": "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
    "technology": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å",
    "religion_culture": "–†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞",
    "governance_law": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ",
    "construction_infrastructure": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
    "social_relations": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "intelligence": "–†–∞–∑–≤–µ–¥–∫–∞",
}

ASPECT_DESCRIPTIONS = {
    "economy": "—Ç–æ—Ä–≥–æ–≤–ª—è, —Ä–µ—Å—É—Ä—Å—ã, —Ñ–∏–Ω–∞–Ω—Å—ã",
    "military": "–∞—Ä–º–∏—è, –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ, –≤–æ–µ–Ω–Ω–∞—è –º–æ—â—å",
    "foreign_policy": "–¥–∏–ø–ª–æ–º–∞—Ç–∏—è, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "territory": "—Ä–∞–∑–º–µ—Ä, –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≥—Ä–∞–Ω–∏—Ü—ã",
    "technology": "–Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏",
    "religion_culture": "–¥—É—Ö–æ–≤–Ω–∞—è –∂–∏–∑–Ω—å, —Ç—Ä–∞–¥–∏—Ü–∏–∏, –∏–¥–µ–æ–ª–æ–≥–∏—è",
    "governance_law": "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∑–∞–∫–æ–Ω—ã",
    "construction_infrastructure": "–¥–æ—Ä–æ–≥–∏, –≥–æ—Ä–æ–¥–∞, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
    "social_relations": "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å",
    "intelligence": "—à–ø–∏–æ–Ω–∞–∂, –∫–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
}


async def register_command(message: Message, state: FSMContext) -> None:
    """Handle /register command"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)

        # Check if user is already registered
        result = await game_engine.db.execute(
            select(Player).options(selectinload(Player.country)).where(Player.telegram_id == user_id).limit(1)
        )
        existing_player = result.scalar_one_or_none()

        # Get available game (created or active) - take the first one
        result = await game_engine.db.execute(
            select(Game).where(Game.status.in_([GameStatus.CREATED, GameStatus.ACTIVE])).limit(1)
        )
        game = result.scalar_one_or_none()

        if not game:
            await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        break

    # If user is already registered, ask for confirmation to re-register
    if existing_player:
        # Store data for confirmation
        await state.update_data(
            user_id=user_id,
            game_id=game.id,
            max_points=game.max_points,
            existing_player_id=existing_player.id,
            existing_country_id=existing_player.country_id if existing_player.country else None,
        )

        country_info = ""
        if existing_player.country:
            country_info = f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∞: *{existing_player.country.name}*\n"

        await message.answer(
            f"‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï! –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø!*\n\n"
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ.\n"
            f"{country_info}\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã *–ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ò–¢* –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
            f"‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –Ω–æ —Å–≤—è–∑—å —Å–æ —Å—Ç—Ä–∞–Ω–æ–π –ø—Ä–æ–ø–∞–¥–µ—Ç\n"
            f"‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–ù–ï–û–ë–†–ê–¢–ò–ú–û*\n\n"
            f"–í—ã *–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û* —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É?\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ *–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ* (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏), —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="Markdown",
        )
        await state.set_state(RegistrationStates.waiting_for_reregistration_confirmation)
        return

    # New user registration
    await state.update_data(game_id=game.id, user_id=user_id, max_points=game.max_points, spent_points=0)

    await message.answer(
        f"üéÆ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏–≥—Ä–µ '{game.name}'*\n\n"
        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É.\n"
        f"–í—ã –±—É–¥–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–∞–Ω–æ–π –ø–æ 10 –∞—Å–ø–µ–∫—Ç–∞–º —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n"
        f"üìä *–£ –≤–∞—Å –µ—Å—Ç—å {game.max_points} –æ—á–∫–æ–≤* –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–∂–¥—É –∞—Å–ø–µ–∫—Ç–∞–º–∏.\n"
        f"–ö–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å –æ—Ç 0 –¥–æ 10 —É—Ä–æ–≤–Ω—è.\n\n"
        f"*–ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n\n"
        f"–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞?",
        parse_mode="Markdown",
    )
    await state.set_state(RegistrationStates.waiting_for_country_name)


async def process_country_name(message: Message, state: FSMContext) -> None:
    """Process country name"""
    country_name = message.text.strip()

    if len(country_name) < 2 or len(country_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(country_name=country_name)
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: *{country_name}*\n\n"
        f"–¢–µ–ø–µ—Ä—å –¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã "
        f"(–∏—Å—Ç–æ—Ä–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫—É–ª—å—Ç—É—Ä–∞):",
        parse_mode="Markdown",
    )
    await state.set_state(RegistrationStates.waiting_for_country_description)


async def process_country_description(message: Message, state: FSMContext) -> None:
    """Process country description"""
    description = message.text.strip()

    if len(description) < 10 or len(description) > 1000:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    data = await state.get_data()
    await state.update_data(country_description=description)
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
        f"*–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã.*\n\n"
        f"üìä *–î–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤: {data['max_points']} | –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {data['spent_points']} | –û—Å—Ç–∞–ª–æ—Å—å: {data['max_points'] - data['spent_points']}*\n\n"
        f"–ö–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10:\n"
        f"‚Ä¢ 0: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        f"‚Ä¢ 1-3: —Å–ª–∞–±—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
        f"‚Ä¢ 4-6: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
        f"‚Ä¢ 7-8: –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
        f"‚Ä¢ 9-10: –≤—ã–¥–∞—é—â–∏–π—Å—è —É—Ä–æ–≤–µ–Ω—å\n\n"
        f"*{ASPECT_NAMES['economy']}* ({ASPECT_DESCRIPTIONS['economy']})\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 10:",
        parse_mode="Markdown",
    )
    await state.set_state(RegistrationStates.waiting_for_economy)


async def process_aspect(message: Message, state: FSMContext, aspect: str, next_state: State) -> None:
    """Process aspect value"""
    try:
        value = int(message.text.strip())
        if not 0 <= value <= 10:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
        return

    # Get current data and check points
    data = await state.get_data()
    current_spent = data.get("spent_points", 0)
    max_points = data.get("max_points", 30)

    # Calculate new total if we set this aspect
    new_spent = current_spent + value
    remaining = max_points - new_spent

    # Check if we have enough points
    if new_spent > max_points:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!\n\n"
            f"üìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {current_spent} | –î–æ—Å—Ç—É–ø–Ω–æ: {max_points} | –û—Å—Ç–∞–ª–æ—Å—å: {max_points - current_spent}\n"
            f"–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å {value} –æ—á–∫–æ–≤, –Ω–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {max_points - current_spent}.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ {max_points - current_spent}:",
            parse_mode="Markdown",
        )
        return

    # Store aspect value and update spent points
    data[aspect] = value
    data["spent_points"] = new_spent
    await state.update_data(**data)

    # Get next aspect or finish
    aspects = list(ASPECT_NAMES.keys())
    current_index = aspects.index(aspect)

    if current_index < len(aspects) - 1:
        next_aspect = aspects[current_index + 1]
        max_for_next = min(10, remaining)
        await message.answer(
            f"‚úÖ {ASPECT_NAMES[aspect]}: {value}\n\n"
            f"üìä *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {new_spent} | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}*\n\n"
            f"*{ASPECT_NAMES[next_aspect]}* ({ASPECT_DESCRIPTIONS[next_aspect]})\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ {max_for_next}:",
            parse_mode="Markdown",
        )
        await state.set_state(next_state)
    else:
        # All aspects done, ask for capital
        await message.answer(
            f"‚úÖ {ASPECT_NAMES[aspect]}: {value}\n\n"
            f"üìä *–ò—Ç–æ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {new_spent} –∏–∑ {max_points} –æ—á–∫–æ–≤*\n"
            f"*–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {remaining} –æ—á–∫–æ–≤*\n\n"
            f"*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
            f"–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã?",
            parse_mode="Markdown",
        )
        await state.set_state(RegistrationStates.waiting_for_capital)


async def process_economy(message: Message, state: FSMContext) -> None:
    await process_aspect(message, state, "economy", RegistrationStates.waiting_for_military)


async def process_military(message: Message, state: FSMContext) -> None:
    await process_aspect(message, state, "military", RegistrationStates.waiting_for_foreign_policy)


async def process_foreign_policy(message: Message, state: FSMContext) -> None:
    await process_aspect(message, state, "foreign_policy", RegistrationStates.waiting_for_territory)


async def process_territory(message: Message, state: FSMContext) -> None:
    await process_aspect(message, state, "territory", RegistrationStates.waiting_for_technology)


async def process_technology(message: Message, state: FSMContext) -> None:
    await process_aspect(message, state, "technology", RegistrationStates.waiting_for_religion_culture)


async def process_religion_culture(message: Message, state: FSMContext) -> None:
    await process_aspect(
        message,
        state,
        "religion_culture",
        RegistrationStates.waiting_for_governance_law,
    )


async def process_governance_law(message: Message, state: FSMContext) -> None:
    await process_aspect(
        message,
        state,
        "governance_law",
        RegistrationStates.waiting_for_construction_infrastructure,
    )


async def process_construction_infrastructure(message: Message, state: FSMContext) -> None:
    await process_aspect(
        message,
        state,
        "construction_infrastructure",
        RegistrationStates.waiting_for_social_relations,
    )


async def process_social_relations(message: Message, state: FSMContext) -> None:
    await process_aspect(message, state, "social_relations", RegistrationStates.waiting_for_intelligence)


async def process_intelligence(message: Message, state: FSMContext) -> None:
    await process_aspect(message, state, "intelligence", RegistrationStates.waiting_for_capital)


async def process_capital(message: Message, state: FSMContext) -> None:
    """Process capital name"""
    capital = message.text.strip()

    if len(capital) < 2 or len(capital) > 50:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏—Ü—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(capital=capital)
    await message.answer(
        f"‚úÖ –°—Ç–æ–ª–∏—Ü–∞: *{capital}*\n\n"
        f"–ö–∞–∫–æ–≤–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã? "
        f"(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50000000)",
        parse_mode="Markdown",
    )
    await state.set_state(RegistrationStates.waiting_for_population)


async def process_population(message: Message, state: FSMContext) -> None:
    """Process population and complete registration"""
    try:
        population = int(message.text.strip())
        if population < 1000 or population > 2000000000:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è (–æ—Ç 1000 –¥–æ 2 –º–ª—Ä–¥).")
        return

    # Get all registration data
    data = await state.get_data()
    data["population"] = population

    async for db in get_db():
        game_engine = GameEngine(db)

        # Create country
        country = await game_engine.create_country(
            game_id=data["game_id"],
            name=data["country_name"],
            description=data["country_description"],
            capital=data["capital"],
            population=data["population"],
            aspects={
                "economy": data["economy"],
                "military": data["military"],
                "foreign_policy": data["foreign_policy"],
                "territory": data["territory"],
                "technology": data["technology"],
                "religion_culture": data["religion_culture"],
                "governance_law": data["governance_law"],
                "construction_infrastructure": data["construction_infrastructure"],
                "social_relations": data["social_relations"],
                "intelligence": data["intelligence"],
            },
        )

        # Determine player role
        player_role = await determine_player_role(
            telegram_id=data["user_id"], game_id=data["game_id"], db=game_engine.db
        )

        # Create player with determined role
        await game_engine.create_player(
            game_id=data["game_id"],
            telegram_id=data["user_id"],
            username=message.from_user.username,
            display_name=message.from_user.full_name,
            country_id=country.id,
            role=player_role,
        )

        # If this is a regular player, send registration to admin
        if player_role.value == "player":
            # Find admin to send registration to
            from wpg_engine.models import PlayerRole

            result = await game_engine.db.execute(
                select(Player).where(Player.game_id == data["game_id"]).where(Player.role == PlayerRole.ADMIN).limit(1)
            )
            admin = result.scalar_one_or_none()

            if admin and admin.telegram_id:
                try:
                    # Calculate total points spent
                    total_points = (
                        data["economy"]
                        + data["military"]
                        + data["foreign_policy"]
                        + data["territory"]
                        + data["technology"]
                        + data["religion_culture"]
                        + data["governance_law"]
                        + data["construction_infrastructure"]
                        + data["social_relations"]
                        + data["intelligence"]
                    )

                    # Format registration message for admin
                    registration_message = (
                        f"üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\n\n"
                        f"<b>–ò–≥—Ä–æ–∫:</b> {message.from_user.full_name}\n"
                        f"<b>Username:</b> @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"<b>Telegram ID:</b> <code>{data['user_id']}</code>\n\n"
                        f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {data['country_name']}\n"
                        f"<b>–°—Ç–æ–ª–∏—Ü–∞:</b> {data['capital']}\n"
                        f"<b>–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</b> {population:,}\n\n"
                        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{data['country_description']}\n\n"
                        f"üìä <b>–û—á–∫–∏: {total_points}/{data['max_points']} (–æ—Å—Ç–∞–ª–æ—Å—å: {data['max_points'] - total_points})</b>\n\n"
                        f"<b>–ê—Å–ø–µ–∫—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è:</b>\n"
                        f"üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞: {data['economy']}/10\n"
                        f"‚öîÔ∏è –í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ: {data['military']}/10\n"
                        f"ü§ù –í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞: {data['foreign_policy']}/10\n"
                        f"üó∫Ô∏è –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {data['territory']}/10\n"
                        f"üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å: {data['technology']}/10\n"
                        f"üèõÔ∏è –†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞: {data['religion_culture']}/10\n"
                        f"‚öñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ: {data['governance_law']}/10\n"
                        f"üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {data['construction_infrastructure']}/10\n"
                        f"üë• –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è: {data['social_relations']}/10\n"
                        f"üïµÔ∏è –†–∞–∑–≤–µ–¥–∫–∞: {data['intelligence']}/10\n\n"
                        f"<b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
                        f"‚Ä¢ <code>–æ–¥–æ–±—Ä–∏—Ç—å</code> - –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏\n"
                        f"‚Ä¢ <code>–æ—Ç–∫–ª–æ–Ω–∏—Ç—å</code> - –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏\n"
                        f"‚Ä¢ <code>–æ—Ç–∫–ª–æ–Ω–∏—Ç—å [–ø—Ä–∏—á–∏–Ω–∞]</code> - –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"
                    )

                    # Send to admin
                    bot = message.bot
                    await bot.send_message(admin.telegram_id, registration_message, parse_mode="HTML")

                except Exception as e:
                    print(f"Failed to send registration to admin: {e}")

        break

    # Show summary with role-specific message
    role_message = ""
    if player_role.value == "admin":
        role_message = (
            "üëë *–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–≥—Ä—ã!*\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        )
    else:
        role_message = (
            "‚è≥ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.*\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n"
        )

    await message.answer(
        f"üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        f"*–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞:* {data['country_name']}\n"
        f"*–°—Ç–æ–ª–∏—Ü–∞:* {data['capital']}\n"
        f"*–ù–∞—Å–µ–ª–µ–Ω–∏–µ:* {population:,}\n\n"
        f"*–ê—Å–ø–µ–∫—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è:*\n"
        f"üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞: {data['economy']}\n"
        f"‚öîÔ∏è –í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ: {data['military']}\n"
        f"ü§ù –í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞: {data['foreign_policy']}\n"
        f"üó∫Ô∏è –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {data['territory']}\n"
        f"üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å: {data['technology']}\n"
        f"üèõÔ∏è –†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞: {data['religion_culture']}\n"
        f"‚öñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ: {data['governance_law']}\n"
        f"üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {data['construction_infrastructure']}\n"
        f"üë• –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è: {data['social_relations']}\n"
        f"üïµÔ∏è –†–∞–∑–≤–µ–¥–∫–∞: {data['intelligence']}\n\n"
        f"{role_message}"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode="Markdown",
    )

    await state.clear()


async def process_reregistration_confirmation(message: Message, state: FSMContext) -> None:
    """Process confirmation for re-registration"""
    confirmation = message.text.strip()

    if confirmation != "–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ":
        await message.answer("‚ùå –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        await state.clear()
        return

    # Get stored data
    data = await state.get_data()
    user_id = data["user_id"]
    game_id = data["game_id"]
    max_points = data["max_points"]
    existing_player_id = data["existing_player_id"]
    existing_country_id = data.get("existing_country_id")

    async for db in get_db():
        game_engine = GameEngine(db)

        # Delete existing player's messages first to avoid foreign key constraint issues
        result = await game_engine.db.execute(select(MessageModel).where(MessageModel.player_id == existing_player_id))
        messages = result.scalars().all()
        for msg in messages:
            await game_engine.db.delete(msg)

        # Delete existing country
        if existing_country_id:
            result = await game_engine.db.execute(select(Country).where(Country.id == existing_country_id))
            country = result.scalar_one_or_none()
            if country:
                await game_engine.db.delete(country)

        # Delete player
        result = await game_engine.db.execute(select(Player).where(Player.id == existing_player_id))
        player = result.scalar_one_or_none()
        if player:
            await game_engine.db.delete(player)

        await game_engine.db.commit()

        # Get game info for new registration
        result = await game_engine.db.execute(select(Game).where(Game.id == game_id))
        game = result.scalar_one_or_none()
        break

    # Clear old data and start fresh registration
    await state.clear()
    await state.update_data(game_id=game_id, user_id=user_id, max_points=max_points, spent_points=0)

    await message.answer(
        f"‚úÖ *–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.*\n\n"
        f"üéÆ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏–≥—Ä–µ '{game.name}'*\n\n"
        f"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É.\n"
        f"–í—ã –±—É–¥–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–∞–Ω–æ–π –ø–æ 10 –∞—Å–ø–µ–∫—Ç–∞–º —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n"
        f"üìä *–£ –≤–∞—Å –µ—Å—Ç—å {game.max_points} –æ—á–∫–æ–≤* –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–∂–¥—É –∞—Å–ø–µ–∫—Ç–∞–º–∏.\n"
        f"–ö–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å –æ—Ç 0 –¥–æ 10 —É—Ä–æ–≤–Ω—è.\n\n"
        f"*–ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n\n"
        f"–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞?",
        parse_mode="Markdown",
    )
    await state.set_state(RegistrationStates.waiting_for_country_name)


def register_registration_handlers(dp: Dispatcher) -> None:
    """Register registration handlers"""
    dp.message.register(register_command, Command("register"))
    dp.message.register(process_reregistration_confirmation, RegistrationStates.waiting_for_reregistration_confirmation)
    dp.message.register(process_country_name, RegistrationStates.waiting_for_country_name)
    dp.message.register(process_country_description, RegistrationStates.waiting_for_country_description)
    dp.message.register(process_economy, RegistrationStates.waiting_for_economy)
    dp.message.register(process_military, RegistrationStates.waiting_for_military)
    dp.message.register(process_foreign_policy, RegistrationStates.waiting_for_foreign_policy)
    dp.message.register(process_territory, RegistrationStates.waiting_for_territory)
    dp.message.register(process_technology, RegistrationStates.waiting_for_technology)
    dp.message.register(process_religion_culture, RegistrationStates.waiting_for_religion_culture)
    dp.message.register(process_governance_law, RegistrationStates.waiting_for_governance_law)
    dp.message.register(
        process_construction_infrastructure,
        RegistrationStates.waiting_for_construction_infrastructure,
    )
    dp.message.register(process_social_relations, RegistrationStates.waiting_for_social_relations)
    dp.message.register(process_intelligence, RegistrationStates.waiting_for_intelligence)
    dp.message.register(process_capital, RegistrationStates.waiting_for_capital)
    dp.message.register(process_population, RegistrationStates.waiting_for_population)
