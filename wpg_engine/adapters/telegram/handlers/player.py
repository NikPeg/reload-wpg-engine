"""
Player handlers
"""

from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from wpg_engine.adapters.telegram.utils import escape_html
from wpg_engine.core.engine import GameEngine
from wpg_engine.models import Player, get_db

# Removed PostStates - no longer needed


def truncate_text(text: str, max_length: int = 300) -> str:
    """Truncate text to max_length characters, adding ... if truncated"""
    if not text:
        return text
    if len(text) <= max_length:
        return text
    return text[:max_length].rstrip() + "..."


async def stats_command(message: Message) -> None:
    """Handle /stats command - show player's country info"""
    user_id = message.from_user.id

    async for db in get_db():
        game_engine = GameEngine(db)

        # Get player
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country), selectinload(Player.game))
            .where(Player.telegram_id == user_id)
        )
        player = result.scalar_one_or_none()
        break

    if not player:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return

    if not player.country:
        await message.answer("‚ùå –í–∞–º –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    country = player.country
    aspects = country.get_aspects()

    # Format aspects with emojis
    aspect_emojis = {
        "economy": "üí∞",
        "military": "‚öîÔ∏è",
        "foreign_policy": "ü§ù",
        "territory": "üó∫Ô∏è",
        "technology": "üî¨",
        "religion_culture": "üèõÔ∏è",
        "governance_law": "‚öñÔ∏è",
        "construction_infrastructure": "üèóÔ∏è",
        "social_relations": "üë•",
        "intelligence": "üïµÔ∏è",
    }

    aspect_names = {
        "economy": "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "military": "–í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ",
        "foreign_policy": "–í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞",
        "territory": "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
        "technology": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å",
        "religion_culture": "–†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞",
        "governance_law": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ",
        "construction_infrastructure": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
        "social_relations": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "intelligence": "–†–∞–∑–≤–µ–¥–∫–∞",
    }

    aspects_text = ""
    for aspect, data in aspects.items():
        emoji = aspect_emojis.get(aspect, "üìä")
        name = aspect_names.get(aspect, aspect)
        value = data["value"]
        description = data["description"] or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

        # Add rating bar
        rating_bar = "‚ñà" * value + "‚ñë" * (10 - value)

        aspects_text += f"{emoji} <b>{name}</b>: {value}/10\n"
        aspects_text += f"   {rating_bar}\n"
        aspects_text += f"   <i>{escape_html(truncate_text(description, 300))}</i>\n\n"

    # Build country info message
    country_info = "üèõÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ</b>\n\n"
    country_info += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {escape_html(country.name)}\n"

    # Show synonyms if they exist
    if country.synonyms:
        synonyms_text = ", ".join([escape_html(syn) for syn in country.synonyms])
        country_info += f"<b>–°–∏–Ω–æ–Ω–∏–º—ã:</b> {synonyms_text}\n"

    country_info += f"<b>–°—Ç–æ–ª–∏—Ü–∞:</b> {escape_html(country.capital or '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    country_info += f"<b>–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</b> {country.population:,} —á–µ–ª.\n\n"
    country_info += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{escape_html(truncate_text(country.description, 300))}</i>\n\n"
    country_info += f"<b>–ê—Å–ø–µ–∫—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è:</b>\n\n{aspects_text}"
    country_info += f"<b>–ò–≥—Ä–∞:</b> {escape_html(player.game.name)}\n"
    country_info += f"<b>–°–µ—Ç—Ç–∏–Ω–≥:</b> {escape_html(player.game.setting)}\n"
    country_info += f"<b>–¢–µ–º–ø:</b> {player.game.years_per_day} –ª–µ—Ç/–¥–µ–Ω—å"

    await message.answer(country_info, parse_mode="HTML")


# Removed post_command and process_post_content functions
# Posts are now handled through direct messages


async def world_command(message: Message) -> None:
    """Handle /world command - show info about countries"""
    user_id = message.from_user.id

    # Parse command arguments
    command_text = message.text or ""
    parts = command_text.split(maxsplit=1)
    country_name = parts[1].strip() if len(parts) > 1 else None

    async for db in get_db():
        game_engine = GameEngine(db)

        # Get player
        result = await game_engine.db.execute(
            select(Player)
            .options(selectinload(Player.country))
            .where(Player.telegram_id == user_id)
        )
        player = result.scalar_one_or_none()

        if not player:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register"
            )
            return

        # Check if user is admin
        from wpg_engine.core.admin_utils import is_admin

        user_is_admin = await is_admin(user_id, game_engine.db)

        # Get all countries in the game
        game = await game_engine.get_game(player.game_id)
        if not game:
            await message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        break

    # Aspect emojis and names
    aspect_emojis = {
        "economy": "üí∞",
        "military": "‚öîÔ∏è",
        "foreign_policy": "ü§ù",
        "territory": "üó∫Ô∏è",
        "technology": "üî¨",
        "religion_culture": "üèõÔ∏è",
        "governance_law": "‚öñÔ∏è",
        "construction_infrastructure": "üèóÔ∏è",
        "social_relations": "üë•",
        "intelligence": "üïµÔ∏è",
    }

    aspect_names = {
        "economy": "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "military": "–í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ",
        "foreign_policy": "–í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞",
        "territory": "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
        "technology": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å",
        "religion_culture": "–†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞",
        "governance_law": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ",
        "construction_infrastructure": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
        "social_relations": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "intelligence": "–†–∞–∑–≤–µ–¥–∫–∞",
    }

    if country_name:
        # Show info about specific country
        country = await game_engine.find_country_by_name_or_synonym(
            player.game_id, country_name
        )

        if not country:
            await message.answer(
                f"‚ùå –°—Ç—Ä–∞–Ω–∞ '{escape_html(country_name)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /world –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω.",
                parse_mode="HTML",
            )
            return

        country_info = f"üèõÔ∏è <b>{escape_html(country.name)}</b>\n"

        country_info += (
            f"<b>–°—Ç–æ–ª–∏—Ü–∞:</b> {escape_html(country.capital or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}\n"
        )

        if country.population:
            country_info += f"<b>–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</b> {country.population:,} —á–µ–ª.\n"

        # Show description for all players when requesting specific country
        if country.description:
            country_info += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{escape_html(truncate_text(country.description, 300))}</i>\n"

        country_info += "\n"

        # When requesting specific country, show detailed info (like admin but without intelligence for regular players)
        aspects = country.get_aspects()
        country_info += "<b>–ê—Å–ø–µ–∫—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è:</b>\n\n"

        for aspect, data in aspects.items():
            # Hide intelligence from regular players
            if aspect == "intelligence" and not user_is_admin:
                continue

            emoji = aspect_emojis.get(aspect, "üìä")
            name = aspect_names.get(aspect, aspect)
            value = data["value"]
            description = data["description"] or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

            # Add rating bar
            rating_bar = "‚ñà" * value + "‚ñë" * (10 - value)

            country_info += f"{emoji} <b>{name}</b>: {value}/10\n"
            country_info += f"   {rating_bar}\n"
            country_info += (
                f"   <i>{escape_html(truncate_text(description, 300))}</i>\n\n"
            )

        # Add hidden marker for admin editing (invisible to user) only for admins
        if user_is_admin:
            country_info += f"\n<code>[EDIT_COUNTRY:{country.id}]</code>"

        # Send country info
        await message.answer(country_info, parse_mode="HTML")
    else:
        # Show info about all countries (original behavior)
        await message.answer("üåç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∞—Ö –º–∏—Ä–∞</b>", parse_mode="HTML")

        # Send info about each country in separate messages
        for country in game.countries:
            if not user_is_admin and country.id == player.country_id:
                continue  # Skip own country for regular players, but show for admins

            country_info = f"üèõÔ∏è <b>{escape_html(country.name)}</b>\n"

            # Show synonyms if they exist
            if country.synonyms:
                synonyms_text = ", ".join(
                    [escape_html(syn) for syn in country.synonyms]
                )
                country_info += f"<b>–°–∏–Ω–æ–Ω–∏–º—ã:</b> {synonyms_text}\n"

            country_info += (
                f"<b>–°—Ç–æ–ª–∏—Ü–∞:</b> {escape_html(country.capital or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}\n"
            )

            if country.population:
                country_info += f"<b>–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</b> {country.population:,} —á–µ–ª.\n"

            if country.description and user_is_admin:
                country_info += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{escape_html(truncate_text(country.description, 300))}</i>\n"

            country_info += "\n"

            if user_is_admin:
                # Admin sees all aspects with descriptions
                aspects = country.get_aspects()
                country_info += "<b>–í—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è:</b>\n\n"

                for aspect, data in aspects.items():
                    emoji = aspect_emojis.get(aspect, "üìä")
                    name = aspect_names.get(aspect, aspect)
                    value = data["value"]
                    description = data["description"] or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

                    # Add rating bar
                    rating_bar = "‚ñà" * value + "‚ñë" * (10 - value)

                    country_info += f"{emoji} <b>{name}</b>: {value}/10\n"
                    country_info += f"   {rating_bar}\n"
                    country_info += (
                        f"   <i>{escape_html(truncate_text(description, 300))}</i>\n\n"
                    )

                # Add hidden marker for admin editing (invisible to user)
                country_info += f"\n<code>[EDIT_COUNTRY:{country.id}]</code>"
            else:
                # Regular players see only public aspects (values only)
                public_aspects = country.get_public_aspects()

                if public_aspects:
                    country_info += "<b>–ò–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"

                    for aspect, data in public_aspects.items():
                        emoji = aspect_emojis.get(aspect, "üìä")
                        name = aspect_names.get(aspect, aspect)
                        value = data["value"]

                        # Hide intelligence from regular players
                        if aspect == "intelligence" and not user_is_admin:
                            continue

                        country_info += f"  {emoji} {name}: {value}/10\n"
                else:
                    country_info += "<i>–ü—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</i>\n"

            # Send country info as separate message
            await message.answer(country_info, parse_mode="HTML")


def register_player_handlers(dp: Dispatcher) -> None:
    """Register player handlers"""
    dp.message.register(stats_command, Command("stats"))
    dp.message.register(world_command, Command("world"))
