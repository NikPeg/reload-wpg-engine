"""
RAG (Retrieval-Augmented Generation) system for admin assistance
"""

from typing import Any

import httpx
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from wpg_engine.config.settings import settings
from wpg_engine.models import Country, Message


class RAGSystem:
    """RAG system for analyzing player messages and providing context to admin"""

    def __init__(self, db: AsyncSession):
        self.db = db
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_key = settings.ai.openrouter_api_key
        self.model = settings.ai.default_model

    async def generate_admin_context(
        self,
        message_content: str,
        sender_country_name: str,
        game_id: int,
        player_id: int,
    ) -> str:
        """
        Generate context for admin based on player message

        Args:
            message_content: The player's message
            sender_country_name: Name of sender's country
            game_id: Game ID to get countries data
            player_id: Player ID to check for previous admin messages

        Returns:
            Context string for admin
        """
        if not self.api_key:
            return ""

        # Get all countries data from the game
        countries_data = await self._get_all_countries_data(game_id)

        if not countries_data:
            return ""

        # Check for previous admin message to provide context
        previous_admin_message = await self._get_previous_admin_message(
            player_id, game_id
        )

        # Create prompt for LLM analysis
        prompt = self._create_analysis_prompt(
            message_content, sender_country_name, countries_data, previous_admin_message
        )

        # Debug output: print the full prompt being sent to LLM
        print("=" * 80)
        print("üîç RAG DEBUG: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM:")
        print("=" * 80)
        print(prompt)
        print("=" * 80)
        if previous_admin_message:
            print(
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞: {previous_admin_message[:100]}..."
            )
        else:
            print("‚ùå –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–æ")
        print("=" * 80)

        try:
            # Get analysis from LLM
            context = await self._call_openrouter_api(prompt)
            return context
        except Exception as e:
            print(f"Error calling AI API: {e}")
            return ""

    async def _get_all_countries_data(self, game_id: int) -> list[dict[str, Any]]:
        """Get data for all countries in the game"""
        result = await self.db.execute(
            select(Country).where(Country.game_id == game_id)
        )
        countries = result.scalars().all()

        countries_data = []
        for country in countries:
            aspects = country.get_aspects()

            country_info = {
                "name": country.name,
                "capital": country.capital or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                "population": country.population or 0,
                "synonyms": country.synonyms or [],
                "aspects": {
                    "economy": aspects["economy"]["value"],
                    "military": aspects["military"]["value"],
                    "foreign_policy": aspects["foreign_policy"]["value"],
                    "territory": aspects["territory"]["value"],
                    "technology": aspects["technology"]["value"],
                    "religion_culture": aspects["religion_culture"]["value"],
                    "governance_law": aspects["governance_law"]["value"],
                    "construction_infrastructure": aspects[
                        "construction_infrastructure"
                    ]["value"],
                    "social_relations": aspects["social_relations"]["value"],
                    "intelligence": aspects["intelligence"]["value"],
                },
                "descriptions": {
                    "economy": aspects["economy"]["description"],
                    "military": aspects["military"]["description"],
                    "foreign_policy": aspects["foreign_policy"]["description"],
                    "territory": aspects["territory"]["description"],
                    "technology": aspects["technology"]["description"],
                    "religion_culture": aspects["religion_culture"]["description"],
                    "governance_law": aspects["governance_law"]["description"],
                    "construction_infrastructure": aspects[
                        "construction_infrastructure"
                    ]["description"],
                    "social_relations": aspects["social_relations"]["description"],
                    "intelligence": aspects["intelligence"]["description"],
                },
            }
            countries_data.append(country_info)

        return countries_data

    async def _get_previous_admin_message(
        self, player_id: int, game_id: int
    ) -> str | None:
        """Get the previous admin message for context if it exists"""

        # Get all messages for this player, ordered by creation time
        result = await self.db.execute(
            select(Message)
            .options(selectinload(Message.player))
            .where(Message.player_id == player_id)
            .where(Message.game_id == game_id)
            .order_by(Message.created_at.desc(), Message.id.desc())
        )
        messages = list(result.scalars().all())

        # Debug output: show all messages for this player
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}:")
        for i, msg in enumerate(messages):
            msg_type = "–ê–î–ú–ò–ù" if msg.is_admin_reply else "–ò–ì–†–û–ö"
            print(
                f"  {i}: [{msg_type}] {msg.content[:50]}... (ID: {msg.id}, created: {msg.created_at})"
            )

        # Look through messages to find the pattern: player message -> admin reply -> current player message
        # We want to find the most recent admin reply that comes before the current player message
        if len(messages) >= 2:
            # Skip the first message (current player message) and look for admin replies
            for i in range(1, len(messages)):
                if messages[i].is_admin_reply:
                    print(
                        f"üéØ DEBUG: –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}: {messages[i].content[:100]}..."
                    )
                    return messages[i].content

        print("‚ùå DEBUG: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None

    def _create_analysis_prompt(
        self,
        message: str,
        sender_country: str,
        countries_data: list[dict[str, Any]],
        previous_admin_message: str | None = None,
    ) -> str:
        """Create prompt for LLM analysis"""

        # Format countries data for the prompt
        countries_info = ""
        for country in countries_data:
            synonyms_str = (
                f" (—Å–∏–Ω–æ–Ω–∏–º—ã: {', '.join(country['synonyms'])})"
                if country["synonyms"]
                else ""
            )

            countries_info += f"""
{country["name"]}{synonyms_str}
–°—Ç–æ–ª–∏—Ü–∞: {country["capital"]}
–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {country["population"]:,}
–ê—Å–ø–µ–∫—Ç—ã (1-10):
- –≠–∫–æ–Ω–æ–º–∏–∫–∞: {country["aspects"]["economy"]}{f" - {country['descriptions']['economy']}" if country["descriptions"]["economy"] else ""}
- –í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ: {country["aspects"]["military"]}{f" - {country['descriptions']['military']}" if country["descriptions"]["military"] else ""}
- –í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞: {country["aspects"]["foreign_policy"]}{f" - {country['descriptions']['foreign_policy']}" if country["descriptions"]["foreign_policy"] else ""}
- –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {country["aspects"]["territory"]}{f" - {country['descriptions']['territory']}" if country["descriptions"]["territory"] else ""}
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {country["aspects"]["technology"]}{f" - {country['descriptions']['technology']}" if country["descriptions"]["technology"] else ""}
- –†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞: {country["aspects"]["religion_culture"]}{f" - {country['descriptions']['religion_culture']}" if country["descriptions"]["religion_culture"] else ""}
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ: {country["aspects"]["governance_law"]}{f" - {country['descriptions']['governance_law']}" if country["descriptions"]["governance_law"] else ""}
- –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {country["aspects"]["construction_infrastructure"]}{f" - {country['descriptions']['construction_infrastructure']}" if country["descriptions"]["construction_infrastructure"] else ""}
- –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è: {country["aspects"]["social_relations"]}{f" - {country['descriptions']['social_relations']}" if country["descriptions"]["social_relations"] else ""}
- –†–∞–∑–≤–µ–¥–∫–∞: {country["aspects"]["intelligence"]}{f" - {country['descriptions']['intelligence']}" if country["descriptions"]["intelligence"] else ""}
"""

        context_section = ""
        if previous_admin_message:
            context_section = f"""
–ö–û–ù–¢–ï–ö–°–¢: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É:
"{previous_admin_message}"

–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""

        prompt = f"""–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã.
{context_section}
–ò–≥—Ä–æ–∫ –∏–∑ —Å—Ç—Ä–∞–Ω—ã "{sender_country}" –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:
"{message}"

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –≤ –∏–≥—Ä–µ:
{countries_info}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞{" (—É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)" if previous_admin_message else ""}
2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –∏–ª–∏ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–≤–∫–ª—é—á–∞—è —Å–∏–Ω–æ–Ω–∏–º—ã)
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º —Å—Ç—Ä–∞–Ω–∞–º

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –µ–º—É –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞:
- —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —Å—Ç—Ä–∞–Ω –∞—Å–ø–µ–∫—Ç–∞—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏ –≤–æ–µ–Ω–Ω—É—é –º–æ—â—å –≤—Å–µ—Ö –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."""

        return prompt

    async def _call_openrouter_api(self, prompt: str) -> str:
        """Call OpenRouter API"""
        url = "https://openrouter.ai/api/v1/chat/completions"

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }

        data = {
            "model": self.model,
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 1000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            "temperature": 0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        }

        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(url, json=data, headers=headers)
            response.raise_for_status()

            result = response.json()
            return result["choices"][0]["message"]["content"].strip()
