"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

from wpg_engine.core.rag_system import RAGSystem
from wpg_engine.models import Country, Game
from wpg_engine.models.base import Base


async def create_demo_data(session: AsyncSession):
    """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""

    # –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
    game = Game(
        name="–î–µ–º–æ –∏–≥—Ä–∞",
        description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è RAG",
        setting="–§—ç–Ω—Ç–µ–∑–∏",
        max_players=10,
        years_per_day=5,
        max_points=30,
        max_population=10000000
    )
    session.add(game)
    await session.flush()

    # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã
    countries_data = [
        {
            "name": "–°–æ–ª—è—Ä–∏—è",
            "capital": "–°–æ–ª–Ω–µ—á–Ω—ã–π –ì–æ—Ä–æ–¥",
            "population": 5000000,
            "synonyms": ["–°–æ–ª–Ω–µ—á–Ω–∞—è –ò–º–ø–µ—Ä–∏—è", "–°–ò"],
            "aspects": {
                "economy": 7, "military": 8, "foreign_policy": 6,
                "territory": 7, "technology": 9, "religion_culture": 5,
                "governance_law": 8, "construction_infrastructure": 7,
                "social_relations": 6, "intelligence": 7
            }
        },
        {
            "name": "–í–∏—Ä–¥–∂–∏–Ω–∏—è",
            "capital": "–†–∏—á–º–æ–Ω–¥",
            "population": 3000000,
            "synonyms": ["–í–∏—Ä–≥", "–í–†"],
            "aspects": {
                "economy": 6, "military": 5, "foreign_policy": 7,
                "territory": 6, "technology": 6, "religion_culture": 8,
                "governance_law": 7, "construction_infrastructure": 6,
                "social_relations": 7, "intelligence": 5
            }
        },
        {
            "name": "–ê–±–æ–±–∏—Å—Ç–∞–Ω",
            "capital": "–ê–±–æ–±–≥—Ä–∞–¥",
            "population": 2000000,
            "synonyms": ["–ê–±–æ–±–∞", "–ê–ë"],
            "aspects": {
                "economy": 4, "military": 3, "foreign_policy": 5,
                "territory": 5, "technology": 4, "religion_culture": 6,
                "governance_law": 4, "construction_infrastructure": 3,
                "social_relations": 5, "intelligence": 4
            }
        }
    ]

    for country_data in countries_data:
        country = Country(
            game_id=game.id,
            name=country_data["name"],
            capital=country_data["capital"],
            population=country_data["population"],
            synonyms=country_data["synonyms"],
            **country_data["aspects"]
        )
        session.add(country)

    await session.commit()
    return game.id


async def demo_rag_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ RAG —Å–∏—Å—Ç–µ–º—ã"""

    # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
    engine = create_async_engine("sqlite+aiosqlite:///:memory:", echo=False)

    # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    # –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    async with async_session() as session:
        # –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        game_id = await create_demo_data(session)

        # –°–æ–∑–¥–∞—Ç—å RAG —Å–∏—Å—Ç–µ–º—É
        rag_system = RAGSystem(session)

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = [
            {
                "message": "–•–æ—á—É –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –í–∏—Ä–¥–∂–∏–Ω–∏—é –∏ –ê–±–æ–±–∏—Å—Ç–∞–Ω",
                "sender": "–°–æ–ª—è—Ä–∏—è"
            },
            {
                "message": "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–æ—Ä–≥–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å –°–ò",
                "sender": "–í–∏—Ä–¥–∂–∏–Ω–∏—è"
            },
            {
                "message": "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
                "sender": "–ê–±–æ–±–∏—Å—Ç–∞–Ω"
            },
            {
                "message": "–°–æ–ª–Ω–µ—á–Ω–∞—è –ò–º–ø–µ—Ä–∏—è —É–≥—Ä–æ–∂–∞–µ—Ç –Ω–∞—à–∏–º –≥—Ä–∞–Ω–∏—Ü–∞–º",
                "sender": "–ê–±–æ–±–∏—Å—Ç–∞–Ω"
            }
        ]

        print("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞\n")
        print("=" * 60)

        for i, test_case in enumerate(test_messages, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}:")
            print(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {test_case['sender']}")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {test_case['message']}")
            print("-" * 40)

            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã
            context = await rag_system.generate_admin_context(
                test_case["message"],
                test_case["sender"],
                game_id
            )

            if context:
                print("üéØ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞:")
                print(context)
            else:
                print("‚ö†Ô∏è RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞)")

                # –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print("üìä –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∞—Ö:")
                countries_data = await rag_system._get_all_countries_data(game_id)
                for country in countries_data:
                    if (country['name'].lower() in test_case['message'].lower() or
                        any(syn.lower() in test_case['message'].lower() for syn in country['synonyms'])):
                        print(f"  üèõÔ∏è {country['name']}: –í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ {country['aspects']['military']}/10, "
                              f"–≠–∫–æ–Ω–æ–º–∏–∫–∞ {country['aspects']['economy']}/10")

            print()


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã...")
    print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω API –∫–ª—é—á OpenRouter –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π AI_TOKEN")
    print()

    asyncio.run(demo_rag_analysis())
